#!/bin/bash

error_exit() {
    local message=$1

    echo "[FATAL] $message" 1>&2
    exit 1
}

sudo apt-get install -y jq

export AWS_DEFAULT_REGION=eu-west-1

# Max number of retries for finding an ENI
RETRY_LIMIT=5

# Use the instance metadata to find out about the network the instance has been lauched into (the IP is the standard AWS metadata IP)
AWS_METADATA_IP=169.254.169.254
SELF_INSTANCE_ID=`curl http://${AWS_METADATA_IP}/latest/meta-data/instance-id`
AVAILABILITY_ZONE=`curl http://${AWS_METADATA_IP}/latest/dynamic/instance-identity/document | jq -r '.availabilityZone'`
SUBNET_ID=`aws ec2 describe-subnets \
    --filters "Name=tag:Name,Values=tip-magma" "Name=availabilityZone,Values=$AVAILABILITY_ZONE" \
    --region eu-west-1 \
    --query "Subnets[0].[SubnetId][0]" \
    | grep -o 'subnet-[a-z0-9]*'`

ENI_NAME=tip-magma
ENI_INDEX=1

S3_CONFIG_BUCKET=magma-deployment
ZK_CONFIG_FILE=zoo.cfg
KAFKA_CONFIG_FILE=kafka.config

# Get the environment this instance is deploying into
# CodeDeploy may not have applied tags when we get here, so we just figure out what autoscaling group we're part of and get the tags that will eventually be applied.
ASGROUP=`aws autoscaling describe-auto-scaling-instances --instance-ids ${SELF_INSTANCE_ID} --region eu-west-1 --output=text | cut -f 2`
DEPLOY_ENV=`aws autoscaling describe-tags --filters Name="auto-scaling-group",Values=${ASGROUP} Name=Key,Values=environment --region eu-west-1 --output=text | cut -f6`
if [ $? != 0 ]; then
    error_exit "Couldn't get deployment environment."
fi

setup_box() {
    # Remove unused packages
    sudo apt autoremove --purge -y

    # Prepare for using envdir
    sudo apt-get -y install daemontools
    mkdir -p /var/opt/magma/envdir

    # Copy specified envdir from S3
    sudo aws s3 cp s3://magma-deployment/environments/${DEPLOY_ENV} /var/opt/magma/envdir --region eu-west-1 --recursive

    if [ $? != 0 ]; then
        error_exit "Couldn't pull settings for environment $DEPLOY_ENV."
    fi

    # Get HOST_NAME and add it to envdir
    HOST_NAME=$(wget -q -O - http://169.254.169.254/latest/meta-data/public-hostname)
    echo ${HOST_NAME} > /var/opt/magma/envdir/HOST_NAME

    # Copy certs and private keys from S3
    sudo aws s3 cp s3://magma-deployment/certs /var/opt/magma/certs --region eu-west-1 --recursive

    if [ $? != 0 ]; then
        error_exit "Couldn't pull SSL certs and keys."
    fi
}

set_server_ip_envdir() {
    # Get the IP of the ENI and set it in envdir as SERVER_IP
    ENI_PRIVATE_IP=`aws ec2 describe-network-interfaces \
        --filters "Name=tag:Name,Values=$ENI_NAME" "Name=subnet-id,Values=$SUBNET_ID" "Name=tag:environment,Values=$DEPLOY_ENV" \
        --output json \
        --query "NetworkInterfaces[0].PrivateIpAddresses[0].PrivateIpAddress" \
        | grep -o '[0-9\.]*'`
    echo ${ENI_PRIVATE_IP} > /var/opt/magma/envdir/SERVER_IP
}

attach_eni() {
    # Check if we have already attached the target ENI - if it is, then just
    # exit early
    # We work off the assumption that if an ENI is attached, it will always
    # be at index 1.
    EXISTING_ENI_ATTACHMENT=`aws ec2 describe-instances \
        --filters "Name=instance-id,Values=${SELF_INSTANCE_ID}" "Name=tag:environment,Values=$DEPLOY_ENV" \
        --query "Reservations[0].Instances[0].NetworkInterfaces[1].Attachment.AttachmentId" \
        | grep -o 'eni-attach-[a-z0-9]*'`
    if [[ ! -z ${EXISTING_ENI_ATTACHMENT} ]]; then
        set_server_ip_envdir
        echo ENI ${EXISTING_ENI_ATTACHMENT} is already attached to this box
        return 0
    fi

    # Use the AWS CLI to see if the target ENI is already attached to another
    # instance
    CURRENT_ATTACHMENT_ID=`aws ec2 describe-network-interfaces \
        --filters "Name=tag:Name,Values=$ENI_NAME" "Name=subnet-id,Values=$SUBNET_ID" "Name=tag:environment,Values=$DEPLOY_ENV" \
        --query "NetworkInterfaces[0].[Attachment][0].[AttachmentId]" \
        | grep -o 'eni-attach-[a-z0-9]*'`

    # ..and if it is, remove the attachment (the assumption here is that it's
    # still attached to another instance that is being terminated).
    if [ ${CURRENT_ATTACHMENT_ID}"X" != "X" ]; then
      echo Detaching ${CURRENT_ATTACHMENT_ID};
      aws ec2 detach-network-interface --attachment-id ${CURRENT_ATTACHMENT_ID}
    fi

    # Use the AWS CLI to get the id of the ENI to be attached. To allow some
    # processing time if the ENI was previously detached, allow some timed
    # retries
    NETWORK_INTERFACE_ID=`aws ec2 describe-network-interfaces \
        --filters "Name=status,Values=available" "Name=tag:Name,Values=$ENI_NAME" "Name=subnet-id,Values=$SUBNET_ID" "Name=tag:environment,Values=$DEPLOY_ENV" \
        --output json --query "NetworkInterfaces[0].NetworkInterfaceId" \
        | grep -o 'eni-[a-z0-9]*'`
    RETRIES=0
    while [[ ${NETWORK_INTERFACE_ID}"X" == "X" ]]; do
        RETRIES=$((RETRIES+ 1))
        if [[ ${RETRIES} -ge ${RETRY_LIMIT} ]]; then
            error_exit "Could not find available ENI within retry limit"
        fi

        echo "No available ENIs found, sleeping for 10 seconds and retrying..."
        sleep 10
        NETWORK_INTERFACE_ID=`aws ec2 describe-network-interfaces \
            --filters "Name=status,Values=available" "Name=tag:Name,Values=$ENI_NAME" "Name=subnet-id,Values=$SUBNET_ID" "Name=tag:environment,Values=$DEPLOY_ENV" \
            --output json --query "NetworkInterfaces[0].NetworkInterfaceId" \
            | grep -o 'eni-[a-z0-9]*'`
    done

    # Attach the ENI (and display the attachment id)
    echo Attaching ${ENI_NAME} to ${ENI_INDEX}
    aws ec2 attach-network-interface \
        --network-interface-id ${NETWORK_INTERFACE_ID} \
        --instance-id ${SELF_INSTANCE_ID} \
        --device-index ${ENI_INDEX}
    set_server_ip_envdir
}

configure_kafka() {
    PRIMARY_IP=`curl http://${AWS_METADATA_IP}/latest/meta-data/local-ipv4`
    HOST_NAME=`curl http://${AWS_METADATA_IP}/latest/meta-data/local-hostname`
    SHORT_HOST_NAME=`echo ${HOST_NAME} | awk --field-separator \. '{ print $1 }'`

    # The default host name for an EC2 instance causes Kafka to throw an
    # exception so create an appropriate hosts file entry which Kafka can use
    echo >> /etc/hosts
    echo ${PRIMARY_IP} ${SHORT_HOST_NAME} ${HOST_NAME} >> /etc/hosts
}

setup_box
attach_eni
configure_kafka
