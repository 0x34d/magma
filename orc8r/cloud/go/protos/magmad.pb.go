// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/protos/magmad.proto

package protos // import "magma/orc8r/cloud/go/protos"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _struct "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NetworkInterface_Status int32

const (
	NetworkInterface_UNKNOWN NetworkInterface_Status = 0
	NetworkInterface_UP      NetworkInterface_Status = 1
	NetworkInterface_DOWN    NetworkInterface_Status = 2
)

var NetworkInterface_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "UP",
	2: "DOWN",
}
var NetworkInterface_Status_value = map[string]int32{
	"UNKNOWN": 0,
	"UP":      1,
	"DOWN":    2,
}

func (x NetworkInterface_Status) String() string {
	return proto.EnumName(NetworkInterface_Status_name, int32(x))
}
func (NetworkInterface_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{17, 0}
}

// RequestedAction is an emergency/last resort operation request for an
// unresponsive or flaky access gateway. It's not meant to be used under normal
// operating conditions. Not all actions may be supported by every gateway
type CheckinResponse_RequestedAction int32

const (
	CheckinResponse_NONE             CheckinResponse_RequestedAction = 0
	CheckinResponse_RESTART_SERVICES CheckinResponse_RequestedAction = 1
	CheckinResponse_RESTART_SYSTEM   CheckinResponse_RequestedAction = 2
)

var CheckinResponse_RequestedAction_name = map[int32]string{
	0: "NONE",
	1: "RESTART_SERVICES",
	2: "RESTART_SYSTEM",
}
var CheckinResponse_RequestedAction_value = map[string]int32{
	"NONE":             0,
	"RESTART_SERVICES": 1,
	"RESTART_SYSTEM":   2,
}

func (x CheckinResponse_RequestedAction) String() string {
	return proto.EnumName(CheckinResponse_RequestedAction_name, int32(x))
}
func (CheckinResponse_RequestedAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{23, 0}
}

type PingParams struct {
	HostOrIp             string   `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	NumPackets           int32    `protobuf:"varint,2,opt,name=num_packets,json=numPackets,proto3" json:"num_packets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingParams) Reset()         { *m = PingParams{} }
func (m *PingParams) String() string { return proto.CompactTextString(m) }
func (*PingParams) ProtoMessage()    {}
func (*PingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{0}
}
func (m *PingParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingParams.Unmarshal(m, b)
}
func (m *PingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingParams.Marshal(b, m, deterministic)
}
func (dst *PingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingParams.Merge(dst, src)
}
func (m *PingParams) XXX_Size() int {
	return xxx_messageInfo_PingParams.Size(m)
}
func (m *PingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PingParams.DiscardUnknown(m)
}

var xxx_messageInfo_PingParams proto.InternalMessageInfo

func (m *PingParams) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *PingParams) GetNumPackets() int32 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

type TracerouteParams struct {
	HostOrIp             string   `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	MaxHops              int32    `protobuf:"varint,2,opt,name=max_hops,json=maxHops,proto3" json:"max_hops,omitempty"`
	BytesPerPacket       int32    `protobuf:"varint,3,opt,name=bytes_per_packet,json=bytesPerPacket,proto3" json:"bytes_per_packet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerouteParams) Reset()         { *m = TracerouteParams{} }
func (m *TracerouteParams) String() string { return proto.CompactTextString(m) }
func (*TracerouteParams) ProtoMessage()    {}
func (*TracerouteParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{1}
}
func (m *TracerouteParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteParams.Unmarshal(m, b)
}
func (m *TracerouteParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteParams.Marshal(b, m, deterministic)
}
func (dst *TracerouteParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteParams.Merge(dst, src)
}
func (m *TracerouteParams) XXX_Size() int {
	return xxx_messageInfo_TracerouteParams.Size(m)
}
func (m *TracerouteParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteParams.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteParams proto.InternalMessageInfo

func (m *TracerouteParams) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *TracerouteParams) GetMaxHops() int32 {
	if m != nil {
		return m.MaxHops
	}
	return 0
}

func (m *TracerouteParams) GetBytesPerPacket() int32 {
	if m != nil {
		return m.BytesPerPacket
	}
	return 0
}

type NetworkTestRequest struct {
	Pings                []*PingParams       `protobuf:"bytes,1,rep,name=pings,proto3" json:"pings,omitempty"`
	Traceroutes          []*TracerouteParams `protobuf:"bytes,2,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NetworkTestRequest) Reset()         { *m = NetworkTestRequest{} }
func (m *NetworkTestRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkTestRequest) ProtoMessage()    {}
func (*NetworkTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{2}
}
func (m *NetworkTestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkTestRequest.Unmarshal(m, b)
}
func (m *NetworkTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkTestRequest.Marshal(b, m, deterministic)
}
func (dst *NetworkTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTestRequest.Merge(dst, src)
}
func (m *NetworkTestRequest) XXX_Size() int {
	return xxx_messageInfo_NetworkTestRequest.Size(m)
}
func (m *NetworkTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTestRequest proto.InternalMessageInfo

func (m *NetworkTestRequest) GetPings() []*PingParams {
	if m != nil {
		return m.Pings
	}
	return nil
}

func (m *NetworkTestRequest) GetTraceroutes() []*TracerouteParams {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

type PingResult struct {
	HostOrIp             string   `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	NumPackets           int32    `protobuf:"varint,2,opt,name=num_packets,json=numPackets,proto3" json:"num_packets,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	PacketsTransmitted   int32    `protobuf:"varint,4,opt,name=packets_transmitted,json=packetsTransmitted,proto3" json:"packets_transmitted,omitempty"`
	PacketsReceived      int32    `protobuf:"varint,5,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	AvgResponseMs        float32  `protobuf:"fixed32,6,opt,name=avg_response_ms,json=avgResponseMs,proto3" json:"avg_response_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResult) Reset()         { *m = PingResult{} }
func (m *PingResult) String() string { return proto.CompactTextString(m) }
func (*PingResult) ProtoMessage()    {}
func (*PingResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{3}
}
func (m *PingResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResult.Unmarshal(m, b)
}
func (m *PingResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResult.Marshal(b, m, deterministic)
}
func (dst *PingResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResult.Merge(dst, src)
}
func (m *PingResult) XXX_Size() int {
	return xxx_messageInfo_PingResult.Size(m)
}
func (m *PingResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResult.DiscardUnknown(m)
}

var xxx_messageInfo_PingResult proto.InternalMessageInfo

func (m *PingResult) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *PingResult) GetNumPackets() int32 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

func (m *PingResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PingResult) GetPacketsTransmitted() int32 {
	if m != nil {
		return m.PacketsTransmitted
	}
	return 0
}

func (m *PingResult) GetPacketsReceived() int32 {
	if m != nil {
		return m.PacketsReceived
	}
	return 0
}

func (m *PingResult) GetAvgResponseMs() float32 {
	if m != nil {
		return m.AvgResponseMs
	}
	return 0
}

type TracerouteProbe struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	RttMs                float32  `protobuf:"fixed32,3,opt,name=rtt_ms,json=rttMs,proto3" json:"rtt_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerouteProbe) Reset()         { *m = TracerouteProbe{} }
func (m *TracerouteProbe) String() string { return proto.CompactTextString(m) }
func (*TracerouteProbe) ProtoMessage()    {}
func (*TracerouteProbe) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{4}
}
func (m *TracerouteProbe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteProbe.Unmarshal(m, b)
}
func (m *TracerouteProbe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteProbe.Marshal(b, m, deterministic)
}
func (dst *TracerouteProbe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteProbe.Merge(dst, src)
}
func (m *TracerouteProbe) XXX_Size() int {
	return xxx_messageInfo_TracerouteProbe.Size(m)
}
func (m *TracerouteProbe) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteProbe.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteProbe proto.InternalMessageInfo

func (m *TracerouteProbe) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *TracerouteProbe) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *TracerouteProbe) GetRttMs() float32 {
	if m != nil {
		return m.RttMs
	}
	return 0
}

type TracerouteHop struct {
	Idx                  int32              `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Probes               []*TracerouteProbe `protobuf:"bytes,2,rep,name=probes,proto3" json:"probes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TracerouteHop) Reset()         { *m = TracerouteHop{} }
func (m *TracerouteHop) String() string { return proto.CompactTextString(m) }
func (*TracerouteHop) ProtoMessage()    {}
func (*TracerouteHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{5}
}
func (m *TracerouteHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteHop.Unmarshal(m, b)
}
func (m *TracerouteHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteHop.Marshal(b, m, deterministic)
}
func (dst *TracerouteHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteHop.Merge(dst, src)
}
func (m *TracerouteHop) XXX_Size() int {
	return xxx_messageInfo_TracerouteHop.Size(m)
}
func (m *TracerouteHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteHop.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteHop proto.InternalMessageInfo

func (m *TracerouteHop) GetIdx() int32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *TracerouteHop) GetProbes() []*TracerouteProbe {
	if m != nil {
		return m.Probes
	}
	return nil
}

type TracerouteResult struct {
	Error                string           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	HostOrIp             string           `protobuf:"bytes,2,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	Hops                 []*TracerouteHop `protobuf:"bytes,3,rep,name=hops,proto3" json:"hops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TracerouteResult) Reset()         { *m = TracerouteResult{} }
func (m *TracerouteResult) String() string { return proto.CompactTextString(m) }
func (*TracerouteResult) ProtoMessage()    {}
func (*TracerouteResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{6}
}
func (m *TracerouteResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteResult.Unmarshal(m, b)
}
func (m *TracerouteResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteResult.Marshal(b, m, deterministic)
}
func (dst *TracerouteResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteResult.Merge(dst, src)
}
func (m *TracerouteResult) XXX_Size() int {
	return xxx_messageInfo_TracerouteResult.Size(m)
}
func (m *TracerouteResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteResult.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteResult proto.InternalMessageInfo

func (m *TracerouteResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TracerouteResult) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *TracerouteResult) GetHops() []*TracerouteHop {
	if m != nil {
		return m.Hops
	}
	return nil
}

type NetworkTestResponse struct {
	Pings                []*PingResult       `protobuf:"bytes,1,rep,name=pings,proto3" json:"pings,omitempty"`
	Traceroutes          []*TracerouteResult `protobuf:"bytes,2,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NetworkTestResponse) Reset()         { *m = NetworkTestResponse{} }
func (m *NetworkTestResponse) String() string { return proto.CompactTextString(m) }
func (*NetworkTestResponse) ProtoMessage()    {}
func (*NetworkTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{7}
}
func (m *NetworkTestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkTestResponse.Unmarshal(m, b)
}
func (m *NetworkTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkTestResponse.Marshal(b, m, deterministic)
}
func (dst *NetworkTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTestResponse.Merge(dst, src)
}
func (m *NetworkTestResponse) XXX_Size() int {
	return xxx_messageInfo_NetworkTestResponse.Size(m)
}
func (m *NetworkTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTestResponse proto.InternalMessageInfo

func (m *NetworkTestResponse) GetPings() []*PingResult {
	if m != nil {
		return m.Pings
	}
	return nil
}

func (m *NetworkTestResponse) GetTraceroutes() []*TracerouteResult {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

type GetGatewayIdResponse struct {
	GatewayId            string   `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGatewayIdResponse) Reset()         { *m = GetGatewayIdResponse{} }
func (m *GetGatewayIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetGatewayIdResponse) ProtoMessage()    {}
func (*GetGatewayIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{8}
}
func (m *GetGatewayIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayIdResponse.Unmarshal(m, b)
}
func (m *GetGatewayIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayIdResponse.Marshal(b, m, deterministic)
}
func (dst *GetGatewayIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayIdResponse.Merge(dst, src)
}
func (m *GetGatewayIdResponse) XXX_Size() int {
	return xxx_messageInfo_GetGatewayIdResponse.Size(m)
}
func (m *GetGatewayIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayIdResponse proto.InternalMessageInfo

func (m *GetGatewayIdResponse) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

type RestartServicesRequest struct {
	Services             []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartServicesRequest) Reset()         { *m = RestartServicesRequest{} }
func (m *RestartServicesRequest) String() string { return proto.CompactTextString(m) }
func (*RestartServicesRequest) ProtoMessage()    {}
func (*RestartServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{9}
}
func (m *RestartServicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartServicesRequest.Unmarshal(m, b)
}
func (m *RestartServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartServicesRequest.Marshal(b, m, deterministic)
}
func (dst *RestartServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartServicesRequest.Merge(dst, src)
}
func (m *RestartServicesRequest) XXX_Size() int {
	return xxx_messageInfo_RestartServicesRequest.Size(m)
}
func (m *RestartServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartServicesRequest proto.InternalMessageInfo

func (m *RestartServicesRequest) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type GenericCommandParams struct {
	Command              string          `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Params               *_struct.Struct `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GenericCommandParams) Reset()         { *m = GenericCommandParams{} }
func (m *GenericCommandParams) String() string { return proto.CompactTextString(m) }
func (*GenericCommandParams) ProtoMessage()    {}
func (*GenericCommandParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{10}
}
func (m *GenericCommandParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericCommandParams.Unmarshal(m, b)
}
func (m *GenericCommandParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericCommandParams.Marshal(b, m, deterministic)
}
func (dst *GenericCommandParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericCommandParams.Merge(dst, src)
}
func (m *GenericCommandParams) XXX_Size() int {
	return xxx_messageInfo_GenericCommandParams.Size(m)
}
func (m *GenericCommandParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericCommandParams.DiscardUnknown(m)
}

var xxx_messageInfo_GenericCommandParams proto.InternalMessageInfo

func (m *GenericCommandParams) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *GenericCommandParams) GetParams() *_struct.Struct {
	if m != nil {
		return m.Params
	}
	return nil
}

type GenericCommandResponse struct {
	Response             *_struct.Struct `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GenericCommandResponse) Reset()         { *m = GenericCommandResponse{} }
func (m *GenericCommandResponse) String() string { return proto.CompactTextString(m) }
func (*GenericCommandResponse) ProtoMessage()    {}
func (*GenericCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{11}
}
func (m *GenericCommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericCommandResponse.Unmarshal(m, b)
}
func (m *GenericCommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericCommandResponse.Marshal(b, m, deterministic)
}
func (dst *GenericCommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericCommandResponse.Merge(dst, src)
}
func (m *GenericCommandResponse) XXX_Size() int {
	return xxx_messageInfo_GenericCommandResponse.Size(m)
}
func (m *GenericCommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericCommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericCommandResponse proto.InternalMessageInfo

func (m *GenericCommandResponse) GetResponse() *_struct.Struct {
	if m != nil {
		return m.Response
	}
	return nil
}

// Usage information about a disk partition
type DiskPartition struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	MountPoint           string   `protobuf:"bytes,2,opt,name=mount_point,json=mountPoint,proto3" json:"mount_point,omitempty"`
	Total                uint64   `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	Used                 uint64   `protobuf:"varint,4,opt,name=used,proto3" json:"used,omitempty"`
	Free                 uint64   `protobuf:"varint,5,opt,name=free,proto3" json:"free,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiskPartition) Reset()         { *m = DiskPartition{} }
func (m *DiskPartition) String() string { return proto.CompactTextString(m) }
func (*DiskPartition) ProtoMessage()    {}
func (*DiskPartition) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{12}
}
func (m *DiskPartition) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiskPartition.Unmarshal(m, b)
}
func (m *DiskPartition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiskPartition.Marshal(b, m, deterministic)
}
func (dst *DiskPartition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiskPartition.Merge(dst, src)
}
func (m *DiskPartition) XXX_Size() int {
	return xxx_messageInfo_DiskPartition.Size(m)
}
func (m *DiskPartition) XXX_DiscardUnknown() {
	xxx_messageInfo_DiskPartition.DiscardUnknown(m)
}

var xxx_messageInfo_DiskPartition proto.InternalMessageInfo

func (m *DiskPartition) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DiskPartition) GetMountPoint() string {
	if m != nil {
		return m.MountPoint
	}
	return ""
}

func (m *DiskPartition) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *DiskPartition) GetUsed() uint64 {
	if m != nil {
		return m.Used
	}
	return 0
}

func (m *DiskPartition) GetFree() uint64 {
	if m != nil {
		return m.Free
	}
	return 0
}

type SystemStatus struct {
	Time         uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	CpuUser      uint64 `protobuf:"varint,5,opt,name=cpu_user,json=cpuUser,proto3" json:"cpu_user,omitempty"`
	CpuSystem    uint64 `protobuf:"varint,6,opt,name=cpu_system,json=cpuSystem,proto3" json:"cpu_system,omitempty"`
	CpuIdle      uint64 `protobuf:"varint,7,opt,name=cpu_idle,json=cpuIdle,proto3" json:"cpu_idle,omitempty"`
	MemTotal     uint64 `protobuf:"varint,10,opt,name=mem_total,json=memTotal,proto3" json:"mem_total,omitempty"`
	MemAvailable uint64 `protobuf:"varint,11,opt,name=mem_available,json=memAvailable,proto3" json:"mem_available,omitempty"`
	MemUsed      uint64 `protobuf:"varint,12,opt,name=mem_used,json=memUsed,proto3" json:"mem_used,omitempty"`
	MemFree      uint64 `protobuf:"varint,13,opt,name=mem_free,json=memFree,proto3" json:"mem_free,omitempty"`
	SwapTotal    uint64 `protobuf:"varint,15,opt,name=swap_total,json=swapTotal,proto3" json:"swap_total,omitempty"`
	SwapUsed     uint64 `protobuf:"varint,16,opt,name=swap_used,json=swapUsed,proto3" json:"swap_used,omitempty"`
	SwapFree     uint64 `protobuf:"varint,17,opt,name=swap_free,json=swapFree,proto3" json:"swap_free,omitempty"`
	UptimeSecs   uint64 `protobuf:"varint,14,opt,name=uptime_secs,json=uptimeSecs,proto3" json:"uptime_secs,omitempty"`
	// Disk usage information
	DiskPartitions       []*DiskPartition `protobuf:"bytes,18,rep,name=disk_partitions,json=diskPartitions,proto3" json:"disk_partitions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SystemStatus) Reset()         { *m = SystemStatus{} }
func (m *SystemStatus) String() string { return proto.CompactTextString(m) }
func (*SystemStatus) ProtoMessage()    {}
func (*SystemStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{13}
}
func (m *SystemStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemStatus.Unmarshal(m, b)
}
func (m *SystemStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemStatus.Marshal(b, m, deterministic)
}
func (dst *SystemStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemStatus.Merge(dst, src)
}
func (m *SystemStatus) XXX_Size() int {
	return xxx_messageInfo_SystemStatus.Size(m)
}
func (m *SystemStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SystemStatus proto.InternalMessageInfo

func (m *SystemStatus) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SystemStatus) GetCpuUser() uint64 {
	if m != nil {
		return m.CpuUser
	}
	return 0
}

func (m *SystemStatus) GetCpuSystem() uint64 {
	if m != nil {
		return m.CpuSystem
	}
	return 0
}

func (m *SystemStatus) GetCpuIdle() uint64 {
	if m != nil {
		return m.CpuIdle
	}
	return 0
}

func (m *SystemStatus) GetMemTotal() uint64 {
	if m != nil {
		return m.MemTotal
	}
	return 0
}

func (m *SystemStatus) GetMemAvailable() uint64 {
	if m != nil {
		return m.MemAvailable
	}
	return 0
}

func (m *SystemStatus) GetMemUsed() uint64 {
	if m != nil {
		return m.MemUsed
	}
	return 0
}

func (m *SystemStatus) GetMemFree() uint64 {
	if m != nil {
		return m.MemFree
	}
	return 0
}

func (m *SystemStatus) GetSwapTotal() uint64 {
	if m != nil {
		return m.SwapTotal
	}
	return 0
}

func (m *SystemStatus) GetSwapUsed() uint64 {
	if m != nil {
		return m.SwapUsed
	}
	return 0
}

func (m *SystemStatus) GetSwapFree() uint64 {
	if m != nil {
		return m.SwapFree
	}
	return 0
}

func (m *SystemStatus) GetUptimeSecs() uint64 {
	if m != nil {
		return m.UptimeSecs
	}
	return 0
}

func (m *SystemStatus) GetDiskPartitions() []*DiskPartition {
	if m != nil {
		return m.DiskPartitions
	}
	return nil
}

type Package struct {
	// Name of the package. Ex: 'magma'
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version of the package. Ex: '0.0.0.0'
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Package) Reset()         { *m = Package{} }
func (m *Package) String() string { return proto.CompactTextString(m) }
func (*Package) ProtoMessage()    {}
func (*Package) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{14}
}
func (m *Package) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Package.Unmarshal(m, b)
}
func (m *Package) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Package.Marshal(b, m, deterministic)
}
func (dst *Package) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Package.Merge(dst, src)
}
func (m *Package) XXX_Size() int {
	return xxx_messageInfo_Package.Size(m)
}
func (m *Package) XXX_DiscardUnknown() {
	xxx_messageInfo_Package.DiscardUnknown(m)
}

var xxx_messageInfo_Package proto.InternalMessageInfo

func (m *Package) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Package) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type ConfigInfo struct {
	// Unix timestamp of the mconfig on the gateway
	MconfigCreatedAt     uint64   `protobuf:"varint,1,opt,name=mconfig_created_at,json=mconfigCreatedAt,proto3" json:"mconfig_created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigInfo) Reset()         { *m = ConfigInfo{} }
func (m *ConfigInfo) String() string { return proto.CompactTextString(m) }
func (*ConfigInfo) ProtoMessage()    {}
func (*ConfigInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{15}
}
func (m *ConfigInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigInfo.Unmarshal(m, b)
}
func (m *ConfigInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigInfo.Marshal(b, m, deterministic)
}
func (dst *ConfigInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigInfo.Merge(dst, src)
}
func (m *ConfigInfo) XXX_Size() int {
	return xxx_messageInfo_ConfigInfo.Size(m)
}
func (m *ConfigInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigInfo proto.InternalMessageInfo

func (m *ConfigInfo) GetMconfigCreatedAt() uint64 {
	if m != nil {
		return m.MconfigCreatedAt
	}
	return 0
}

type PlatformInfo struct {
	// Gateway's IP address on VPN
	VpnIp string `protobuf:"bytes,1,opt,name=vpn_ip,json=vpnIp,proto3" json:"vpn_ip,omitempty"`
	// Information of packages installed
	Packages []*Package `protobuf:"bytes,2,rep,name=packages,proto3" json:"packages,omitempty"`
	// Current running kernel version
	KernelVersion string `protobuf:"bytes,3,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	// All kernel versions installed
	KernelVersionsInstalled []string `protobuf:"bytes,4,rep,name=kernel_versions_installed,json=kernelVersionsInstalled,proto3" json:"kernel_versions_installed,omitempty"`
	// Information of gateway configs
	ConfigInfo           *ConfigInfo `protobuf:"bytes,5,opt,name=config_info,json=configInfo,proto3" json:"config_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PlatformInfo) Reset()         { *m = PlatformInfo{} }
func (m *PlatformInfo) String() string { return proto.CompactTextString(m) }
func (*PlatformInfo) ProtoMessage()    {}
func (*PlatformInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{16}
}
func (m *PlatformInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlatformInfo.Unmarshal(m, b)
}
func (m *PlatformInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlatformInfo.Marshal(b, m, deterministic)
}
func (dst *PlatformInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlatformInfo.Merge(dst, src)
}
func (m *PlatformInfo) XXX_Size() int {
	return xxx_messageInfo_PlatformInfo.Size(m)
}
func (m *PlatformInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlatformInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlatformInfo proto.InternalMessageInfo

func (m *PlatformInfo) GetVpnIp() string {
	if m != nil {
		return m.VpnIp
	}
	return ""
}

func (m *PlatformInfo) GetPackages() []*Package {
	if m != nil {
		return m.Packages
	}
	return nil
}

func (m *PlatformInfo) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *PlatformInfo) GetKernelVersionsInstalled() []string {
	if m != nil {
		return m.KernelVersionsInstalled
	}
	return nil
}

func (m *PlatformInfo) GetConfigInfo() *ConfigInfo {
	if m != nil {
		return m.ConfigInfo
	}
	return nil
}

type NetworkInterface struct {
	// The ID of the network interface. Ex: 'gtp_br0'
	NetworkInterfaceId string `protobuf:"bytes,1,opt,name=network_interface_id,json=networkInterfaceId,proto3" json:"network_interface_id,omitempty"`
	// Network interface status
	Status NetworkInterface_Status `protobuf:"varint,2,opt,name=status,proto3,enum=magma.orc8r.NetworkInterface_Status" json:"status,omitempty"`
	// MAC address
	MacAddress string `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	// The IPv4 addresses in CIDR notation associated with the network interface
	IpAddresses []string `protobuf:"bytes,4,rep,name=ip_addresses,json=ipAddresses,proto3" json:"ip_addresses,omitempty"`
	// The IPv6 addresses in CIDR notation associated with the network interface
	Ipv6Addresses        []string `protobuf:"bytes,5,rep,name=ipv6_addresses,json=ipv6Addresses,proto3" json:"ipv6_addresses,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInterface) Reset()         { *m = NetworkInterface{} }
func (m *NetworkInterface) String() string { return proto.CompactTextString(m) }
func (*NetworkInterface) ProtoMessage()    {}
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{17}
}
func (m *NetworkInterface) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkInterface.Unmarshal(m, b)
}
func (m *NetworkInterface) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkInterface.Marshal(b, m, deterministic)
}
func (dst *NetworkInterface) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInterface.Merge(dst, src)
}
func (m *NetworkInterface) XXX_Size() int {
	return xxx_messageInfo_NetworkInterface.Size(m)
}
func (m *NetworkInterface) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInterface.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInterface proto.InternalMessageInfo

func (m *NetworkInterface) GetNetworkInterfaceId() string {
	if m != nil {
		return m.NetworkInterfaceId
	}
	return ""
}

func (m *NetworkInterface) GetStatus() NetworkInterface_Status {
	if m != nil {
		return m.Status
	}
	return NetworkInterface_UNKNOWN
}

func (m *NetworkInterface) GetMacAddress() string {
	if m != nil {
		return m.MacAddress
	}
	return ""
}

func (m *NetworkInterface) GetIpAddresses() []string {
	if m != nil {
		return m.IpAddresses
	}
	return nil
}

func (m *NetworkInterface) GetIpv6Addresses() []string {
	if m != nil {
		return m.Ipv6Addresses
	}
	return nil
}

type Route struct {
	// The IPv4 address of the destination
	DestinationIp string `protobuf:"bytes,1,opt,name=destination_ip,json=destinationIp,proto3" json:"destination_ip,omitempty"`
	// The IPv4 address of the gateway
	GatewayIp string `protobuf:"bytes,2,opt,name=gateway_ip,json=gatewayIp,proto3" json:"gateway_ip,omitempty"`
	// The subnet mask of the route
	Genmask string `protobuf:"bytes,3,opt,name=genmask,proto3" json:"genmask,omitempty"`
	// The ID of the network interface associated with the route
	NetworkInterfaceId   string   `protobuf:"bytes,4,opt,name=network_interface_id,json=networkInterfaceId,proto3" json:"network_interface_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{18}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Route.Unmarshal(m, b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Route.Marshal(b, m, deterministic)
}
func (dst *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(dst, src)
}
func (m *Route) XXX_Size() int {
	return xxx_messageInfo_Route.Size(m)
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetDestinationIp() string {
	if m != nil {
		return m.DestinationIp
	}
	return ""
}

func (m *Route) GetGatewayIp() string {
	if m != nil {
		return m.GatewayIp
	}
	return ""
}

func (m *Route) GetGenmask() string {
	if m != nil {
		return m.Genmask
	}
	return ""
}

func (m *Route) GetNetworkInterfaceId() string {
	if m != nil {
		return m.NetworkInterfaceId
	}
	return ""
}

type NetworkInfo struct {
	// The network interfaces of the gateway
	NetworkInterfaces []*NetworkInterface `protobuf:"bytes,1,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	// The routing table of the gateway
	RoutingTable         []*Route `protobuf:"bytes,2,rep,name=routing_table,json=routingTable,proto3" json:"routing_table,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkInfo) Reset()         { *m = NetworkInfo{} }
func (m *NetworkInfo) String() string { return proto.CompactTextString(m) }
func (*NetworkInfo) ProtoMessage()    {}
func (*NetworkInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{19}
}
func (m *NetworkInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkInfo.Unmarshal(m, b)
}
func (m *NetworkInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkInfo.Marshal(b, m, deterministic)
}
func (dst *NetworkInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkInfo.Merge(dst, src)
}
func (m *NetworkInfo) XXX_Size() int {
	return xxx_messageInfo_NetworkInfo.Size(m)
}
func (m *NetworkInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkInfo proto.InternalMessageInfo

func (m *NetworkInfo) GetNetworkInterfaces() []*NetworkInterface {
	if m != nil {
		return m.NetworkInterfaces
	}
	return nil
}

func (m *NetworkInfo) GetRoutingTable() []*Route {
	if m != nil {
		return m.RoutingTable
	}
	return nil
}

type CPUInfo struct {
	// The number of CPU cores for the instance
	CoreCount uint64 `protobuf:"varint,1,opt,name=core_count,json=coreCount,proto3" json:"core_count,omitempty"`
	// The number of threads per CPU core
	ThreadsPerCore uint64 `protobuf:"varint,2,opt,name=threads_per_core,json=threadsPerCore,proto3" json:"threads_per_core,omitempty"`
	// The architecture of the gateway. Ex: 'x86_64'
	Architecture string `protobuf:"bytes,3,opt,name=architecture,proto3" json:"architecture,omitempty"`
	// Name of the CPU. Ex: 'Intel(R) Core(TM) i9-8950HK CPU @ 2.90GHz'
	ModelName            string   `protobuf:"bytes,4,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CPUInfo) Reset()         { *m = CPUInfo{} }
func (m *CPUInfo) String() string { return proto.CompactTextString(m) }
func (*CPUInfo) ProtoMessage()    {}
func (*CPUInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{20}
}
func (m *CPUInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CPUInfo.Unmarshal(m, b)
}
func (m *CPUInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CPUInfo.Marshal(b, m, deterministic)
}
func (dst *CPUInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CPUInfo.Merge(dst, src)
}
func (m *CPUInfo) XXX_Size() int {
	return xxx_messageInfo_CPUInfo.Size(m)
}
func (m *CPUInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CPUInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CPUInfo proto.InternalMessageInfo

func (m *CPUInfo) GetCoreCount() uint64 {
	if m != nil {
		return m.CoreCount
	}
	return 0
}

func (m *CPUInfo) GetThreadsPerCore() uint64 {
	if m != nil {
		return m.ThreadsPerCore
	}
	return 0
}

func (m *CPUInfo) GetArchitecture() string {
	if m != nil {
		return m.Architecture
	}
	return ""
}

func (m *CPUInfo) GetModelName() string {
	if m != nil {
		return m.ModelName
	}
	return ""
}

type MachineInfo struct {
	// CPU information
	CpuInfo *CPUInfo `protobuf:"bytes,1,opt,name=cpu_info,json=cpuInfo,proto3" json:"cpu_info,omitempty"`
	// Network information
	NetworkInfo          *NetworkInfo `protobuf:"bytes,2,opt,name=network_info,json=networkInfo,proto3" json:"network_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MachineInfo) Reset()         { *m = MachineInfo{} }
func (m *MachineInfo) String() string { return proto.CompactTextString(m) }
func (*MachineInfo) ProtoMessage()    {}
func (*MachineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{21}
}
func (m *MachineInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MachineInfo.Unmarshal(m, b)
}
func (m *MachineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MachineInfo.Marshal(b, m, deterministic)
}
func (dst *MachineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MachineInfo.Merge(dst, src)
}
func (m *MachineInfo) XXX_Size() int {
	return xxx_messageInfo_MachineInfo.Size(m)
}
func (m *MachineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MachineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MachineInfo proto.InternalMessageInfo

func (m *MachineInfo) GetCpuInfo() *CPUInfo {
	if m != nil {
		return m.CpuInfo
	}
	return nil
}

func (m *MachineInfo) GetNetworkInfo() *NetworkInfo {
	if m != nil {
		return m.NetworkInfo
	}
	return nil
}

// --------------------------------------------------------------------------
// Magma controller in the cloud
// --------------------------------------------------------------------------
type CheckinRequest struct {
	// Gateway's hardware id
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Gateway status
	Status *ServiceStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// System status
	SystemStatus *SystemStatus `protobuf:"bytes,4,opt,name=system_status,json=systemStatus,proto3" json:"system_status,omitempty"`
	// Platform information
	PlatformInfo *PlatformInfo `protobuf:"bytes,8,opt,name=platform_info,json=platformInfo,proto3" json:"platform_info,omitempty"`
	// Machine information
	MachineInfo *MachineInfo `protobuf:"bytes,9,opt,name=machine_info,json=machineInfo,proto3" json:"machine_info,omitempty"`
	// DEPRECATED
	// Magma python build version number. Ex: '0.0.0'. Use platform_info instead
	MagmaPkgVersion string `protobuf:"bytes,2,opt,name=magma_pkg_version,json=magmaPkgVersion,proto3" json:"magma_pkg_version,omitempty"` // Deprecated: Do not use.
	// Gateway's IP on VPN. Use platform_info instead
	VpnIp string `protobuf:"bytes,5,opt,name=vpn_ip,json=vpnIp,proto3" json:"vpn_ip,omitempty"` // Deprecated: Do not use.
	// Current running kernel version. Use platform_info instead
	KernelVersion string `protobuf:"bytes,6,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"` // Deprecated: Do not use.
	// All kernel versions installed. Use platform_info instead
	KernelVersionsInstalled []string `protobuf:"bytes,7,rep,name=kernel_versions_installed,json=kernelVersionsInstalled,proto3" json:"kernel_versions_installed,omitempty"` // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *CheckinRequest) Reset()         { *m = CheckinRequest{} }
func (m *CheckinRequest) String() string { return proto.CompactTextString(m) }
func (*CheckinRequest) ProtoMessage()    {}
func (*CheckinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{22}
}
func (m *CheckinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckinRequest.Unmarshal(m, b)
}
func (m *CheckinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckinRequest.Marshal(b, m, deterministic)
}
func (dst *CheckinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckinRequest.Merge(dst, src)
}
func (m *CheckinRequest) XXX_Size() int {
	return xxx_messageInfo_CheckinRequest.Size(m)
}
func (m *CheckinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckinRequest proto.InternalMessageInfo

func (m *CheckinRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *CheckinRequest) GetStatus() *ServiceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CheckinRequest) GetSystemStatus() *SystemStatus {
	if m != nil {
		return m.SystemStatus
	}
	return nil
}

func (m *CheckinRequest) GetPlatformInfo() *PlatformInfo {
	if m != nil {
		return m.PlatformInfo
	}
	return nil
}

func (m *CheckinRequest) GetMachineInfo() *MachineInfo {
	if m != nil {
		return m.MachineInfo
	}
	return nil
}

// Deprecated: Do not use.
func (m *CheckinRequest) GetMagmaPkgVersion() string {
	if m != nil {
		return m.MagmaPkgVersion
	}
	return ""
}

// Deprecated: Do not use.
func (m *CheckinRequest) GetVpnIp() string {
	if m != nil {
		return m.VpnIp
	}
	return ""
}

// Deprecated: Do not use.
func (m *CheckinRequest) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

// Deprecated: Do not use.
func (m *CheckinRequest) GetKernelVersionsInstalled() []string {
	if m != nil {
		return m.KernelVersionsInstalled
	}
	return nil
}

type CheckinResponse struct {
	Action               CheckinResponse_RequestedAction `protobuf:"varint,1,opt,name=action,proto3,enum=magma.orc8r.CheckinResponse_RequestedAction" json:"action,omitempty"`
	Time                 uint64                          `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CheckinResponse) Reset()         { *m = CheckinResponse{} }
func (m *CheckinResponse) String() string { return proto.CompactTextString(m) }
func (*CheckinResponse) ProtoMessage()    {}
func (*CheckinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{23}
}
func (m *CheckinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckinResponse.Unmarshal(m, b)
}
func (m *CheckinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckinResponse.Marshal(b, m, deterministic)
}
func (dst *CheckinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckinResponse.Merge(dst, src)
}
func (m *CheckinResponse) XXX_Size() int {
	return xxx_messageInfo_CheckinResponse.Size(m)
}
func (m *CheckinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckinResponse proto.InternalMessageInfo

func (m *CheckinResponse) GetAction() CheckinResponse_RequestedAction {
	if m != nil {
		return m.Action
	}
	return CheckinResponse_NONE
}

func (m *CheckinResponse) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type GatewayStatus struct {
	// Unix time (the number of milliseconds elapsed since January 1, 1970 UTC) of
	// the last checkin
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// Last checkin info that was received from the gateway
	Checkin              *CheckinRequest `protobuf:"bytes,2,opt,name=checkin,proto3" json:"checkin,omitempty"`
	CertExpirationTime   int64           `protobuf:"varint,3,opt,name=cert_expiration_time,json=certExpirationTime,proto3" json:"cert_expiration_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GatewayStatus) Reset()         { *m = GatewayStatus{} }
func (m *GatewayStatus) String() string { return proto.CompactTextString(m) }
func (*GatewayStatus) ProtoMessage()    {}
func (*GatewayStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{24}
}
func (m *GatewayStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayStatus.Unmarshal(m, b)
}
func (m *GatewayStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayStatus.Marshal(b, m, deterministic)
}
func (dst *GatewayStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatus.Merge(dst, src)
}
func (m *GatewayStatus) XXX_Size() int {
	return xxx_messageInfo_GatewayStatus.Size(m)
}
func (m *GatewayStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatus proto.InternalMessageInfo

func (m *GatewayStatus) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GatewayStatus) GetCheckin() *CheckinRequest {
	if m != nil {
		return m.Checkin
	}
	return nil
}

func (m *GatewayStatus) GetCertExpirationTime() int64 {
	if m != nil {
		return m.CertExpirationTime
	}
	return 0
}

type GatewayStatusRequest struct {
	// Gateway's network id
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Gateway's logical id
	LogicalId            string   `protobuf:"bytes,2,opt,name=logical_id,json=logicalId,proto3" json:"logical_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayStatusRequest) Reset()         { *m = GatewayStatusRequest{} }
func (m *GatewayStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayStatusRequest) ProtoMessage()    {}
func (*GatewayStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_d8dffdcbc034e1b4, []int{25}
}
func (m *GatewayStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayStatusRequest.Unmarshal(m, b)
}
func (m *GatewayStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayStatusRequest.Marshal(b, m, deterministic)
}
func (dst *GatewayStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatusRequest.Merge(dst, src)
}
func (m *GatewayStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GatewayStatusRequest.Size(m)
}
func (m *GatewayStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatusRequest proto.InternalMessageInfo

func (m *GatewayStatusRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *GatewayStatusRequest) GetLogicalId() string {
	if m != nil {
		return m.LogicalId
	}
	return ""
}

func init() {
	proto.RegisterType((*PingParams)(nil), "magma.orc8r.PingParams")
	proto.RegisterType((*TracerouteParams)(nil), "magma.orc8r.TracerouteParams")
	proto.RegisterType((*NetworkTestRequest)(nil), "magma.orc8r.NetworkTestRequest")
	proto.RegisterType((*PingResult)(nil), "magma.orc8r.PingResult")
	proto.RegisterType((*TracerouteProbe)(nil), "magma.orc8r.TracerouteProbe")
	proto.RegisterType((*TracerouteHop)(nil), "magma.orc8r.TracerouteHop")
	proto.RegisterType((*TracerouteResult)(nil), "magma.orc8r.TracerouteResult")
	proto.RegisterType((*NetworkTestResponse)(nil), "magma.orc8r.NetworkTestResponse")
	proto.RegisterType((*GetGatewayIdResponse)(nil), "magma.orc8r.GetGatewayIdResponse")
	proto.RegisterType((*RestartServicesRequest)(nil), "magma.orc8r.RestartServicesRequest")
	proto.RegisterType((*GenericCommandParams)(nil), "magma.orc8r.GenericCommandParams")
	proto.RegisterType((*GenericCommandResponse)(nil), "magma.orc8r.GenericCommandResponse")
	proto.RegisterType((*DiskPartition)(nil), "magma.orc8r.DiskPartition")
	proto.RegisterType((*SystemStatus)(nil), "magma.orc8r.SystemStatus")
	proto.RegisterType((*Package)(nil), "magma.orc8r.Package")
	proto.RegisterType((*ConfigInfo)(nil), "magma.orc8r.ConfigInfo")
	proto.RegisterType((*PlatformInfo)(nil), "magma.orc8r.PlatformInfo")
	proto.RegisterType((*NetworkInterface)(nil), "magma.orc8r.NetworkInterface")
	proto.RegisterType((*Route)(nil), "magma.orc8r.Route")
	proto.RegisterType((*NetworkInfo)(nil), "magma.orc8r.NetworkInfo")
	proto.RegisterType((*CPUInfo)(nil), "magma.orc8r.CPUInfo")
	proto.RegisterType((*MachineInfo)(nil), "magma.orc8r.MachineInfo")
	proto.RegisterType((*CheckinRequest)(nil), "magma.orc8r.CheckinRequest")
	proto.RegisterType((*CheckinResponse)(nil), "magma.orc8r.CheckinResponse")
	proto.RegisterType((*GatewayStatus)(nil), "magma.orc8r.GatewayStatus")
	proto.RegisterType((*GatewayStatusRequest)(nil), "magma.orc8r.GatewayStatusRequest")
	proto.RegisterEnum("magma.orc8r.NetworkInterface_Status", NetworkInterface_Status_name, NetworkInterface_Status_value)
	proto.RegisterEnum("magma.orc8r.CheckinResponse_RequestedAction", CheckinResponse_RequestedAction_name, CheckinResponse_RequestedAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MagmadClient is the client API for Magmad service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MagmadClient interface {
	// Starts all magma services
	StartServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Stops all magma services
	StopServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Reboot the gateway device
	Reboot(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Restart specified magma services
	RestartServices(ctx context.Context, in *RestartServicesRequest, opts ...grpc.CallOption) (*Void, error)
	// Updates AG configs and restarts affected AG services
	SetConfigs(ctx context.Context, in *GatewayConfigs, opts ...grpc.CallOption) (*Void, error)
	// Get current AG configs
	GetConfigs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GatewayConfigs, error)
	// Execute some network commands to check gateway network health
	RunNetworkTests(ctx context.Context, in *NetworkTestRequest, opts ...grpc.CallOption) (*NetworkTestResponse, error)
	// Get gateway hardware ID
	GetGatewayId(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetGatewayIdResponse, error)
	// Execute generic command
	GenericCommand(ctx context.Context, in *GenericCommandParams, opts ...grpc.CallOption) (*GenericCommandResponse, error)
	// Get stream of logs
	TailLogs(ctx context.Context, in *TailLogsRequest, opts ...grpc.CallOption) (Magmad_TailLogsClient, error)
}

type magmadClient struct {
	cc *grpc.ClientConn
}

func NewMagmadClient(cc *grpc.ClientConn) MagmadClient {
	return &magmadClient{cc}
}

func (c *magmadClient) StartServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/StartServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) StopServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/StopServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) Reboot(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/Reboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) RestartServices(ctx context.Context, in *RestartServicesRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/RestartServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) SetConfigs(ctx context.Context, in *GatewayConfigs, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/SetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) GetConfigs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GatewayConfigs, error) {
	out := new(GatewayConfigs)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/GetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) RunNetworkTests(ctx context.Context, in *NetworkTestRequest, opts ...grpc.CallOption) (*NetworkTestResponse, error) {
	out := new(NetworkTestResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/RunNetworkTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) GetGatewayId(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetGatewayIdResponse, error) {
	out := new(GetGatewayIdResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/GetGatewayId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) GenericCommand(ctx context.Context, in *GenericCommandParams, opts ...grpc.CallOption) (*GenericCommandResponse, error) {
	out := new(GenericCommandResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/GenericCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) TailLogs(ctx context.Context, in *TailLogsRequest, opts ...grpc.CallOption) (Magmad_TailLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Magmad_serviceDesc.Streams[0], "/magma.orc8r.Magmad/TailLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &magmadTailLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Magmad_TailLogsClient interface {
	Recv() (*LogLine, error)
	grpc.ClientStream
}

type magmadTailLogsClient struct {
	grpc.ClientStream
}

func (x *magmadTailLogsClient) Recv() (*LogLine, error) {
	m := new(LogLine)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MagmadServer is the server API for Magmad service.
type MagmadServer interface {
	// Starts all magma services
	StartServices(context.Context, *Void) (*Void, error)
	// Stops all magma services
	StopServices(context.Context, *Void) (*Void, error)
	// Reboot the gateway device
	Reboot(context.Context, *Void) (*Void, error)
	// Restart specified magma services
	RestartServices(context.Context, *RestartServicesRequest) (*Void, error)
	// Updates AG configs and restarts affected AG services
	SetConfigs(context.Context, *GatewayConfigs) (*Void, error)
	// Get current AG configs
	GetConfigs(context.Context, *Void) (*GatewayConfigs, error)
	// Execute some network commands to check gateway network health
	RunNetworkTests(context.Context, *NetworkTestRequest) (*NetworkTestResponse, error)
	// Get gateway hardware ID
	GetGatewayId(context.Context, *Void) (*GetGatewayIdResponse, error)
	// Execute generic command
	GenericCommand(context.Context, *GenericCommandParams) (*GenericCommandResponse, error)
	// Get stream of logs
	TailLogs(*TailLogsRequest, Magmad_TailLogsServer) error
}

func RegisterMagmadServer(s *grpc.Server, srv MagmadServer) {
	s.RegisterService(&_Magmad_serviceDesc, srv)
}

func _Magmad_StartServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).StartServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/StartServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).StartServices(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_StopServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).StopServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/StopServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).StopServices(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).Reboot(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_RestartServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).RestartServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/RestartServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).RestartServices(ctx, req.(*RestartServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_SetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).SetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/SetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).SetConfigs(ctx, req.(*GatewayConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_GetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).GetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/GetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).GetConfigs(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_RunNetworkTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).RunNetworkTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/RunNetworkTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).RunNetworkTests(ctx, req.(*NetworkTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_GetGatewayId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).GetGatewayId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/GetGatewayId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).GetGatewayId(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_GenericCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericCommandParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).GenericCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/GenericCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).GenericCommand(ctx, req.(*GenericCommandParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_TailLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MagmadServer).TailLogs(m, &magmadTailLogsServer{stream})
}

type Magmad_TailLogsServer interface {
	Send(*LogLine) error
	grpc.ServerStream
}

type magmadTailLogsServer struct {
	grpc.ServerStream
}

func (x *magmadTailLogsServer) Send(m *LogLine) error {
	return x.ServerStream.SendMsg(m)
}

var _Magmad_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Magmad",
	HandlerType: (*MagmadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServices",
			Handler:    _Magmad_StartServices_Handler,
		},
		{
			MethodName: "StopServices",
			Handler:    _Magmad_StopServices_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _Magmad_Reboot_Handler,
		},
		{
			MethodName: "RestartServices",
			Handler:    _Magmad_RestartServices_Handler,
		},
		{
			MethodName: "SetConfigs",
			Handler:    _Magmad_SetConfigs_Handler,
		},
		{
			MethodName: "GetConfigs",
			Handler:    _Magmad_GetConfigs_Handler,
		},
		{
			MethodName: "RunNetworkTests",
			Handler:    _Magmad_RunNetworkTests_Handler,
		},
		{
			MethodName: "GetGatewayId",
			Handler:    _Magmad_GetGatewayId_Handler,
		},
		{
			MethodName: "GenericCommand",
			Handler:    _Magmad_GenericCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TailLogs",
			Handler:       _Magmad_TailLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "orc8r/protos/magmad.proto",
}

// CheckindClient is the client API for Checkind service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckindClient interface {
	// Gateway periodic checkin - records given GW status to the GW's network table
	Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*CheckinResponse, error)
	// Gateway real time status retrieval from the GW's network table
	GetStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*GatewayStatus, error)
	// Removes GW status record from the GW's network table
	DeleteGatewayStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*Void, error)
	// Deletes the network's status table (the table must be emptied prior to removal)
	DeleteNetwork(ctx context.Context, in *NetworkID, opts ...grpc.CallOption) (*Void, error)
	// Returns a list of all logical gateway IDs for the given network which have
	// status stored in the service DB
	List(ctx context.Context, in *NetworkID, opts ...grpc.CallOption) (*IDList, error)
}

type checkindClient struct {
	cc *grpc.ClientConn
}

func NewCheckindClient(cc *grpc.ClientConn) CheckindClient {
	return &checkindClient{cc}
}

func (c *checkindClient) Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*CheckinResponse, error) {
	out := new(CheckinResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/Checkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkindClient) GetStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*GatewayStatus, error) {
	out := new(GatewayStatus)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkindClient) DeleteGatewayStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/DeleteGatewayStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkindClient) DeleteNetwork(ctx context.Context, in *NetworkID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkindClient) List(ctx context.Context, in *NetworkID, opts ...grpc.CallOption) (*IDList, error) {
	out := new(IDList)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckindServer is the server API for Checkind service.
type CheckindServer interface {
	// Gateway periodic checkin - records given GW status to the GW's network table
	Checkin(context.Context, *CheckinRequest) (*CheckinResponse, error)
	// Gateway real time status retrieval from the GW's network table
	GetStatus(context.Context, *GatewayStatusRequest) (*GatewayStatus, error)
	// Removes GW status record from the GW's network table
	DeleteGatewayStatus(context.Context, *GatewayStatusRequest) (*Void, error)
	// Deletes the network's status table (the table must be emptied prior to removal)
	DeleteNetwork(context.Context, *NetworkID) (*Void, error)
	// Returns a list of all logical gateway IDs for the given network which have
	// status stored in the service DB
	List(context.Context, *NetworkID) (*IDList, error)
}

func RegisterCheckindServer(s *grpc.Server, srv CheckindServer) {
	s.RegisterService(&_Checkind_serviceDesc, srv)
}

func _Checkind_Checkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).Checkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/Checkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).Checkin(ctx, req.(*CheckinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkind_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).GetStatus(ctx, req.(*GatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkind_DeleteGatewayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).DeleteGatewayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/DeleteGatewayStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).DeleteGatewayStatus(ctx, req.(*GatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkind_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).DeleteNetwork(ctx, req.(*NetworkID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkind_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).List(ctx, req.(*NetworkID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Checkind_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Checkind",
	HandlerType: (*CheckindServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkin",
			Handler:    _Checkind_Checkin_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Checkind_GetStatus_Handler,
		},
		{
			MethodName: "DeleteGatewayStatus",
			Handler:    _Checkind_DeleteGatewayStatus_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _Checkind_DeleteNetwork_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Checkind_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/magmad.proto",
}

func init() { proto.RegisterFile("orc8r/protos/magmad.proto", fileDescriptor_magmad_d8dffdcbc034e1b4) }

var fileDescriptor_magmad_d8dffdcbc034e1b4 = []byte{
	// 1987 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xdb, 0x6e, 0x1b, 0xc7,
	0xf9, 0x17, 0x29, 0x1e, 0xc4, 0x8f, 0x07, 0xd1, 0x63, 0xc5, 0xa1, 0x68, 0x0b, 0x96, 0xd7, 0xff,
	0x7f, 0xab, 0x00, 0x29, 0x65, 0xc8, 0x71, 0x12, 0x24, 0x81, 0x0b, 0x45, 0x92, 0x6d, 0xc2, 0x96,
	0x4c, 0x0c, 0x29, 0x07, 0xcd, 0xcd, 0x62, 0xb4, 0x3b, 0xa4, 0x16, 0xe2, 0xee, 0x6c, 0x67, 0x86,
	0xb4, 0x8d, 0xde, 0xb6, 0xbd, 0xea, 0x65, 0x5b, 0xa0, 0x2f, 0xd1, 0x8b, 0x3e, 0x4c, 0x9f, 0xa0,
	0x7d, 0x83, 0x3c, 0x40, 0x31, 0x87, 0x5d, 0xee, 0xd2, 0x94, 0xea, 0xb6, 0x57, 0xdc, 0xf9, 0x4e,
	0xf3, 0x1d, 0x7f, 0x33, 0x43, 0xd8, 0x66, 0xdc, 0xfb, 0x9a, 0xef, 0xc7, 0x9c, 0x49, 0x26, 0xf6,
	0x43, 0x32, 0x09, 0x89, 0xdf, 0xd3, 0x2b, 0x54, 0xd7, 0xab, 0x9e, 0x16, 0xe8, 0xe6, 0xe5, 0x3c,
	0x16, 0x86, 0x2c, 0x32, 0x72, 0xdd, 0x6e, 0xde, 0x84, 0xc7, 0xa2, 0x71, 0x30, 0xb1, 0xbc, 0x9d,
	0x1c, 0x4f, 0x50, 0x3e, 0x0f, 0x3c, 0xfa, 0xf8, 0xd1, 0x63, 0xcb, 0xbe, 0x37, 0x61, 0x6c, 0x32,
	0xa5, 0x86, 0x7f, 0x31, 0x1b, 0xef, 0x0b, 0xc9, 0x67, 0x9e, 0x34, 0x5c, 0xe7, 0x25, 0xc0, 0x20,
	0x88, 0x26, 0x03, 0xc2, 0x49, 0x28, 0xd0, 0x3d, 0x80, 0x4b, 0x26, 0xa4, 0xcb, 0xb8, 0x1b, 0xc4,
	0x9d, 0xc2, 0x6e, 0x61, 0xaf, 0x86, 0x37, 0x14, 0xe5, 0x35, 0xef, 0xc7, 0xe8, 0x3e, 0xd4, 0xa3,
	0x59, 0xe8, 0xc6, 0xc4, 0xbb, 0xa2, 0x52, 0x74, 0x8a, 0xbb, 0x85, 0xbd, 0x32, 0x86, 0x68, 0x16,
	0x0e, 0x0c, 0xc5, 0x99, 0x41, 0x7b, 0xc4, 0x89, 0x47, 0x39, 0x9b, 0x49, 0xfa, 0x51, 0x26, 0xb7,
	0x61, 0x23, 0x24, 0xef, 0xdc, 0x4b, 0x16, 0x27, 0xf6, 0xaa, 0x21, 0x79, 0xf7, 0x82, 0xc5, 0x02,
	0xed, 0x41, 0xfb, 0xe2, 0xbd, 0xa4, 0xc2, 0x8d, 0x29, 0xb7, 0x7b, 0x76, 0xd6, 0xb5, 0x48, 0x4b,
	0xd3, 0x07, 0x94, 0x9b, 0x7d, 0x9d, 0xdf, 0x16, 0x00, 0x9d, 0x51, 0xf9, 0x96, 0xf1, 0xab, 0x11,
	0x15, 0x12, 0xd3, 0x5f, 0xcf, 0xa8, 0x90, 0xe8, 0x17, 0x50, 0x8e, 0x83, 0x68, 0x22, 0x3a, 0x85,
	0xdd, 0xf5, 0xbd, 0xfa, 0xc1, 0xa7, 0xbd, 0x4c, 0xae, 0x7b, 0x8b, 0xa0, 0xb1, 0x91, 0x42, 0xbf,
	0x84, 0xba, 0x4c, 0x9d, 0x57, 0xde, 0x28, 0xa5, 0x9d, 0x9c, 0xd2, 0x72, 0x70, 0x38, 0xab, 0xe1,
	0xfc, 0xb3, 0x60, 0x72, 0x89, 0xa9, 0x98, 0x4d, 0xe5, 0xff, 0x98, 0x4b, 0xb4, 0x05, 0x65, 0xca,
	0x39, 0xe3, 0x3a, 0xe6, 0x1a, 0x36, 0x0b, 0xb4, 0x0f, 0xb7, 0xad, 0x8a, 0x2b, 0x39, 0x89, 0x44,
	0x18, 0x48, 0x49, 0xfd, 0x4e, 0x49, 0xab, 0x23, 0xcb, 0x1a, 0x2d, 0x38, 0xe8, 0x33, 0x68, 0x27,
	0x0a, 0x9c, 0x7a, 0x34, 0x98, 0x53, 0xbf, 0x53, 0xd6, 0xd2, 0x9b, 0x96, 0x8e, 0x2d, 0x19, 0xfd,
	0x0c, 0x36, 0xc9, 0x7c, 0xe2, 0x72, 0x2a, 0x62, 0x16, 0x09, 0xea, 0x86, 0xa2, 0x53, 0xd9, 0x2d,
	0xec, 0x15, 0x71, 0x93, 0xcc, 0x55, 0x50, 0x9a, 0x7a, 0x2a, 0x9c, 0x11, 0x6c, 0x66, 0x12, 0xc1,
	0xd9, 0x05, 0x45, 0x5d, 0xd0, 0x91, 0x45, 0x24, 0xa4, 0xd9, 0x48, 0xd5, 0x1a, 0xb5, 0xa0, 0x18,
	0xc4, 0x3a, 0xc0, 0x1a, 0x2e, 0x06, 0x31, 0xfa, 0x04, 0x2a, 0x5c, 0x4a, 0x65, 0x7d, 0x5d, 0x5b,
	0x2f, 0x73, 0x29, 0x4f, 0x85, 0xf3, 0x03, 0x34, 0x17, 0x56, 0x5f, 0xb0, 0x18, 0xb5, 0x61, 0x3d,
	0xf0, 0xdf, 0x69, 0x73, 0x65, 0xac, 0x3e, 0xd1, 0x17, 0x50, 0x89, 0xd5, 0x76, 0x49, 0x71, 0xee,
	0x5d, 0x57, 0x1c, 0x25, 0x84, 0xad, 0xac, 0x33, 0xcf, 0x36, 0xa5, 0xad, 0x4d, 0x9a, 0xdc, 0x42,
	0x36, 0xb9, 0xf9, 0x8a, 0x15, 0x97, 0x2a, 0xd6, 0x83, 0x92, 0x6e, 0xd3, 0x75, 0xbd, 0x77, 0xf7,
	0x9a, 0xbd, 0x5f, 0xb0, 0x18, 0x6b, 0x39, 0xe7, 0x77, 0x05, 0xb8, 0x9d, 0xeb, 0x4a, 0x93, 0xc0,
	0x7f, 0xdf, 0x96, 0xc6, 0xc7, 0xff, 0xaa, 0x2d, 0xad, 0x6a, 0xae, 0x2d, 0x9f, 0xc0, 0xd6, 0x73,
	0x2a, 0x9f, 0x13, 0x49, 0xdf, 0x92, 0xf7, 0x7d, 0x3f, 0xf5, 0x63, 0x07, 0x60, 0x62, 0x88, 0x6e,
	0xe0, 0xdb, 0x44, 0xd4, 0x26, 0x89, 0x98, 0xf3, 0x05, 0xdc, 0xc1, 0x54, 0x48, 0xc2, 0xe5, 0xd0,
	0x20, 0x8a, 0x48, 0xe6, 0xaa, 0x0b, 0x1b, 0x16, 0x64, 0x4c, 0x0c, 0x35, 0x9c, 0xae, 0x1d, 0xa2,
	0x36, 0x8b, 0x28, 0x0f, 0xbc, 0x23, 0x16, 0x86, 0x24, 0xf2, 0x2d, 0x0a, 0x74, 0xa0, 0xea, 0x19,
	0x82, 0xdd, 0x29, 0x59, 0xa2, 0x7d, 0xa8, 0xc4, 0x5a, 0x46, 0x27, 0x5c, 0xe5, 0xc3, 0xe0, 0x55,
	0x2f, 0xc1, 0xab, 0xde, 0x50, 0xe3, 0x15, 0xb6, 0x62, 0xce, 0x29, 0xdc, 0xc9, 0x6f, 0x91, 0x46,
	0xf4, 0x18, 0x36, 0x92, 0xe6, 0xd5, 0xbb, 0xdc, 0x60, 0x2c, 0x15, 0x74, 0x7e, 0x5f, 0x80, 0xe6,
	0x71, 0x20, 0xae, 0x06, 0x84, 0xcb, 0x40, 0x06, 0x2c, 0x42, 0x77, 0xa0, 0xe2, 0x53, 0x15, 0x8e,
	0x75, 0xd5, 0xae, 0xd4, 0xc8, 0x86, 0x6c, 0x16, 0x49, 0x37, 0x66, 0x41, 0x24, 0x6d, 0x7f, 0x80,
	0x26, 0x0d, 0x14, 0x45, 0x75, 0x95, 0x64, 0x92, 0x4c, 0x75, 0x63, 0x97, 0xb0, 0x59, 0x20, 0x04,
	0xa5, 0x99, 0xb0, 0x33, 0x5a, 0xc2, 0xfa, 0x5b, 0xd1, 0xc6, 0x9c, 0x52, 0x3d, 0x89, 0x25, 0xac,
	0xbf, 0x9d, 0xbf, 0xae, 0x43, 0x63, 0xf8, 0x5e, 0x48, 0x1a, 0x0e, 0x25, 0x91, 0x33, 0xa1, 0x84,
	0x64, 0x60, 0x07, 0xaa, 0x84, 0xf5, 0xb7, 0xc2, 0x4b, 0x2f, 0x9e, 0xb9, 0x33, 0x41, 0xb9, 0x55,
	0xae, 0x7a, 0xf1, 0xec, 0x5c, 0x50, 0xae, 0xea, 0xa9, 0x58, 0x42, 0x9b, 0xd0, 0x93, 0x5b, 0xc2,
	0x35, 0x2f, 0x9e, 0x19, 0x9b, 0x89, 0x66, 0xe0, 0x4f, 0x69, 0xa7, 0x9a, 0x6a, 0xf6, 0xfd, 0x29,
	0x45, 0x77, 0xa1, 0x16, 0xd2, 0xd0, 0x35, 0xbe, 0x83, 0xe6, 0x6d, 0x84, 0x34, 0x1c, 0x69, 0xf7,
	0x1f, 0x42, 0x53, 0x31, 0xc9, 0x9c, 0x04, 0x53, 0x72, 0x31, 0xa5, 0x9d, 0xba, 0x16, 0x68, 0x84,
	0x34, 0x3c, 0x4c, 0x68, 0x1a, 0xc6, 0x69, 0xe8, 0xea, 0x38, 0x1b, 0xc6, 0x78, 0x48, 0xc3, 0x73,
	0x15, 0xaa, 0x65, 0xe9, 0x70, 0x9b, 0x29, 0xeb, 0x19, 0xa7, 0xba, 0x03, 0xc5, 0x5b, 0x12, 0xdb,
	0x8d, 0x37, 0x8d, 0xc7, 0x8a, 0x62, 0x76, 0xbe, 0x0b, 0x7a, 0x61, 0xac, 0xb6, 0x8d, 0x5b, 0x8a,
	0xa0, 0xcd, 0x26, 0x4c, 0x6d, 0xf7, 0xd6, 0x82, 0xa9, 0x0d, 0xdf, 0x87, 0xfa, 0x2c, 0x56, 0xf9,
	0x72, 0x05, 0xf5, 0x44, 0xa7, 0xa5, 0xd9, 0x60, 0x48, 0x43, 0xea, 0x09, 0x74, 0x04, 0x9b, 0x7e,
	0x20, 0xae, 0xdc, 0x38, 0x29, 0xba, 0xe8, 0xa0, 0x15, 0x63, 0x9d, 0xeb, 0x0b, 0xdc, 0xf2, 0xb3,
	0x4b, 0xe1, 0x7c, 0x05, 0x55, 0x05, 0xd6, 0x64, 0x42, 0x55, 0xa9, 0x32, 0xd8, 0xa7, 0xbf, 0x55,
	0xcb, 0xcf, 0x29, 0x17, 0x01, 0x8b, 0x6c, 0xab, 0x24, 0x4b, 0xe7, 0x1b, 0x80, 0x23, 0x7d, 0x80,
	0xf7, 0xa3, 0x31, 0x43, 0x9f, 0x03, 0xb2, 0xe7, 0xb9, 0xeb, 0x71, 0x4a, 0x24, 0xf5, 0x5d, 0x22,
	0x6d, 0xd1, 0xdb, 0x96, 0x73, 0x64, 0x18, 0x87, 0xd2, 0xf9, 0xa9, 0x00, 0x8d, 0xc1, 0x94, 0xc8,
	0x31, 0xe3, 0xa1, 0x56, 0xff, 0x04, 0x2a, 0xf3, 0x38, 0x5a, 0x1c, 0x31, 0xe5, 0x79, 0x1c, 0xf5,
	0x63, 0xf4, 0x08, 0x36, 0x62, 0xe3, 0x5c, 0x82, 0x19, 0x5b, 0x79, 0xa0, 0x31, 0x4c, 0x9c, 0x4a,
	0xa1, 0xff, 0x87, 0xd6, 0x15, 0xe5, 0x11, 0x9d, 0xba, 0x89, 0xdb, 0xe6, 0xe4, 0x69, 0x1a, 0xea,
	0x1b, 0x43, 0x44, 0xdf, 0xc0, 0x76, 0x5e, 0x4c, 0xb8, 0x41, 0x24, 0x24, 0x99, 0x4e, 0x75, 0x8f,
	0x2b, 0x38, 0xf8, 0x34, 0xa7, 0x21, 0xfa, 0x09, 0x1b, 0x7d, 0x0d, 0x75, 0x1b, 0x69, 0x10, 0x8d,
	0x99, 0x6e, 0xe0, 0x65, 0x00, 0x5c, 0x24, 0x06, 0x83, 0x97, 0x7e, 0x3b, 0x7f, 0x2e, 0x42, 0xdb,
	0x82, 0x69, 0x3f, 0x92, 0x94, 0x8f, 0x89, 0x47, 0xd1, 0x23, 0xd8, 0x8a, 0x0c, 0xcd, 0x0d, 0x12,
	0xe2, 0x02, 0xcb, 0x50, 0xb4, 0x24, 0xdf, 0xf7, 0xd1, 0x77, 0x50, 0x11, 0x7a, 0xb8, 0x74, 0x49,
	0x5a, 0x07, 0xff, 0x97, 0xdb, 0x7b, 0x79, 0x83, 0x9e, 0x19, 0x44, 0x6c, 0x75, 0x34, 0x00, 0x10,
	0xcf, 0x25, 0xbe, 0xcf, 0xa9, 0x10, 0x36, 0x3d, 0x10, 0x12, 0xef, 0xd0, 0x50, 0xd0, 0x03, 0x68,
	0x04, 0x71, 0xc2, 0xa7, 0xc2, 0xa6, 0xa3, 0x1e, 0xc4, 0x87, 0x09, 0x49, 0x65, 0x39, 0x88, 0xe7,
	0x5f, 0x66, 0x84, 0xca, 0x5a, 0xa8, 0xa9, 0xa8, 0xa9, 0x98, 0xf3, 0x73, 0xa8, 0x58, 0x14, 0xa8,
	0x43, 0xf5, 0xfc, 0xec, 0xe5, 0xd9, 0xeb, 0x1f, 0xce, 0xda, 0x6b, 0xa8, 0x02, 0xc5, 0xf3, 0x41,
	0xbb, 0x80, 0x36, 0xa0, 0x74, 0xac, 0x28, 0x45, 0xe7, 0x2f, 0x05, 0x28, 0x63, 0x05, 0xf4, 0xca,
	0xb2, 0x4f, 0x85, 0x0c, 0x22, 0xa2, 0xda, 0x73, 0xd1, 0x10, 0xcd, 0x0c, 0xb5, 0x1f, 0xe7, 0x60,
	0x3f, 0x39, 0xe4, 0x52, 0xd8, 0x8f, 0x55, 0xd7, 0x4e, 0x68, 0x14, 0x12, 0x71, 0x65, 0xe3, 0x4b,
	0x96, 0xd7, 0x66, 0xbb, 0x74, 0x5d, 0xb6, 0x9d, 0x3f, 0x16, 0xa0, 0x9e, 0xe6, 0x74, 0xcc, 0xd0,
	0x2b, 0x40, 0x1f, 0x58, 0x48, 0x8e, 0xc1, 0x9d, 0x1b, 0x2b, 0x81, 0x6f, 0x2d, 0x9b, 0x17, 0xe8,
	0x2b, 0x68, 0xaa, 0x13, 0x2e, 0x88, 0x26, 0xae, 0xd4, 0xc0, 0x64, 0xda, 0x1c, 0xe5, 0x0c, 0xe9,
	0xd4, 0xe0, 0x86, 0x15, 0x1c, 0x29, 0x39, 0xe7, 0x4f, 0x05, 0xa8, 0x1e, 0x0d, 0xce, 0xb5, 0x4b,
	0x0a, 0x34, 0x19, 0xa7, 0xae, 0xa7, 0x50, 0xdc, 0x0e, 0x5d, 0x4d, 0x51, 0x8e, 0x14, 0x41, 0xdd,
	0x41, 0xe5, 0x25, 0xa7, 0xc4, 0x37, 0xb7, 0x50, 0xc5, 0xd0, 0x29, 0x2b, 0xe1, 0x96, 0xa5, 0x0f,
	0x28, 0x3f, 0x62, 0x9c, 0x22, 0x07, 0x1a, 0x84, 0x7b, 0x97, 0x81, 0xa4, 0x9e, 0x9c, 0x71, 0x6a,
	0x93, 0x97, 0xa3, 0xa9, 0xcd, 0x42, 0xe6, 0xd3, 0xa9, 0xab, 0xb1, 0xc2, 0xe4, 0xad, 0xa6, 0x29,
	0x67, 0x24, 0xa4, 0xce, 0x6f, 0xa0, 0x7e, 0x4a, 0xbc, 0xcb, 0x20, 0xa2, 0xda, 0xb5, 0x7d, 0x0b,
	0xd8, 0x6a, 0x52, 0xcc, 0x69, 0x96, 0x9f, 0x60, 0x1b, 0x82, 0x81, 0x71, 0xa5, 0xf0, 0x2d, 0x34,
	0x16, 0xe9, 0x1d, 0x33, 0x7b, 0x9e, 0x76, 0x56, 0x27, 0x76, 0xcc, 0x70, 0x3d, 0x5a, 0x2c, 0x9c,
	0xbf, 0xaf, 0x43, 0xeb, 0xe8, 0x92, 0x7a, 0x57, 0x41, 0x94, 0x9c, 0xf3, 0x37, 0x5f, 0x10, 0xd0,
	0x41, 0x3a, 0x4b, 0xeb, 0x7a, 0xa3, 0x3c, 0x74, 0xda, 0x4b, 0xc3, 0xd2, 0x04, 0x3d, 0x85, 0xa6,
	0x39, 0x9f, 0x5c, 0xab, 0x5a, 0xd2, 0xaa, 0xdb, 0x79, 0xd5, 0xcc, 0x21, 0x88, 0x1b, 0x22, 0x7b,
	0x24, 0x3e, 0x85, 0x66, 0x6c, 0xc1, 0xcf, 0xc4, 0xb8, 0xb1, 0x42, 0x3f, 0x0b, 0x8f, 0xb8, 0x11,
	0x67, 0xc1, 0xf2, 0x5b, 0x68, 0x84, 0x26, 0xc5, 0x46, 0xbd, 0xb6, 0x22, 0x45, 0x99, 0x1a, 0xe0,
	0x7a, 0x98, 0x29, 0x48, 0x0f, 0x6e, 0x69, 0x39, 0x37, 0xbe, 0x9a, 0xb8, 0x39, 0x68, 0xff, 0xbe,
	0xd8, 0x29, 0xe0, 0x4d, 0xcd, 0x1c, 0x5c, 0x4d, 0x12, 0xa4, 0xdc, 0x4e, 0x91, 0xb9, 0x9c, 0x0a,
	0x59, 0x74, 0xfe, 0xec, 0x03, 0xac, 0xad, 0xa4, 0x22, 0x4b, 0x78, 0xfb, 0xf4, 0x26, 0xbc, 0xad,
	0x2a, 0xec, 0xd0, 0x5a, 0xd7, 0x61, 0xae, 0xf3, 0xb7, 0x02, 0x6c, 0xa6, 0x85, 0xb5, 0x17, 0xa5,
	0x63, 0xa8, 0x10, 0x4f, 0xe1, 0x81, 0xae, 0x6a, 0xeb, 0xe0, 0xf3, 0x7c, 0x63, 0xe5, 0xa5, 0x7b,
	0xb6, 0x1f, 0xa8, 0x7f, 0xa8, 0x75, 0xb0, 0xd5, 0x4d, 0xef, 0x27, 0xc5, 0xc5, 0xfd, 0xc4, 0x39,
	0x81, 0xcd, 0x25, 0x71, 0x85, 0x55, 0x67, 0xaf, 0xcf, 0x4e, 0xda, 0x6b, 0x68, 0x0b, 0xda, 0xf8,
	0x64, 0x38, 0x3a, 0xc4, 0x23, 0x77, 0x78, 0x82, 0xdf, 0xf4, 0x8f, 0x4e, 0x86, 0xed, 0x02, 0x42,
	0xd0, 0x4a, 0xa9, 0xbf, 0x1a, 0x8e, 0x4e, 0x4e, 0xdb, 0x45, 0xe7, 0x0f, 0x05, 0x68, 0xda, 0x1b,
	0xeb, 0x0d, 0x97, 0xa1, 0x27, 0x50, 0xf5, 0x8c, 0xaf, 0xb6, 0xd7, 0xef, 0xae, 0x8e, 0x43, 0xfb,
	0x83, 0x13, 0x59, 0x05, 0x64, 0x1e, 0xe5, 0xd2, 0xa5, 0xef, 0xe2, 0x80, 0x1b, 0xb0, 0xd4, 0xa6,
	0x55, 0x1b, 0xaf, 0x63, 0xa4, 0x78, 0x27, 0x29, 0x6b, 0xa4, 0xa2, 0x1a, 0xc1, 0x56, 0xce, 0x9b,
	0xcc, 0x84, 0xa4, 0x13, 0x97, 0x4e, 0x48, 0x32, 0x55, 0xbe, 0x62, 0x4f, 0xd9, 0x24, 0xf0, 0xc8,
	0x54, 0xb1, 0x2d, 0xd4, 0x5a, 0x4a, 0xdf, 0x3f, 0xf8, 0xa9, 0x04, 0x95, 0x53, 0xfd, 0x67, 0x80,
	0xc2, 0xb2, 0x61, 0xf6, 0xaa, 0x8d, 0x6e, 0xe5, 0x22, 0x79, 0xc3, 0x02, 0xbf, 0xfb, 0x21, 0xc9,
	0x59, 0x43, 0x5f, 0x42, 0x63, 0x28, 0x59, 0xfc, 0x1f, 0xeb, 0x3d, 0x82, 0x0a, 0xa6, 0x17, 0x8c,
	0xc9, 0x8f, 0xd6, 0x78, 0xa9, 0x2a, 0x9b, 0x7b, 0x0f, 0xa0, 0x87, 0x79, 0xa8, 0x5d, 0xf9, 0x5a,
	0x58, 0x6d, 0xec, 0x29, 0xc0, 0x90, 0x4a, 0x73, 0xd6, 0x0b, 0x94, 0x2f, 0x9b, 0xcd, 0xb4, 0x65,
	0x5e, 0xab, 0xff, 0x7c, 0xa1, 0xbf, 0x22, 0x84, 0x9b, 0x4c, 0x3a, 0x6b, 0xe8, 0x0d, 0x6c, 0xe2,
	0x59, 0x94, 0x79, 0x9d, 0x09, 0x74, 0x7f, 0x15, 0x4e, 0x66, 0xfe, 0x4e, 0xe8, 0xee, 0x5e, 0x2f,
	0x60, 0x9f, 0x12, 0x6b, 0xe8, 0x19, 0x34, 0xb2, 0x6f, 0xad, 0x55, 0x9e, 0x3d, 0xc8, 0x7b, 0xb6,
	0xe2, 0x65, 0xe6, 0xac, 0xa1, 0x1f, 0xa1, 0x95, 0x7f, 0xe3, 0xa0, 0x65, 0xb5, 0x0f, 0xdf, 0x58,
	0xdd, 0x87, 0x37, 0x88, 0x2c, 0x6c, 0x1f, 0xfc, 0xa3, 0x08, 0x1b, 0x76, 0x34, 0x7c, 0xf4, 0x0c,
	0xaa, 0xf6, 0x1b, 0xdd, 0x34, 0x3c, 0xdd, 0x7b, 0x37, 0x21, 0x84, 0xb3, 0x86, 0x5e, 0x41, 0xed,
	0x39, 0x95, 0x76, 0x56, 0x1f, 0xac, 0x4a, 0x7e, 0x6e, 0x72, 0xba, 0xdd, 0xeb, 0x45, 0x9c, 0x35,
	0x74, 0x0a, 0xb7, 0x8f, 0xe9, 0x94, 0x4a, 0x9a, 0xc7, 0x80, 0x8f, 0xb0, 0xbb, 0xb2, 0x5b, 0xbe,
	0x83, 0xa6, 0x31, 0x67, 0x8b, 0x86, 0xee, 0xac, 0x3c, 0x13, 0x8f, 0x57, 0x6b, 0x3f, 0x81, 0xd2,
	0xab, 0x40, 0xc8, 0x6b, 0x95, 0x6e, 0xe7, 0xe8, 0xfd, 0x63, 0x25, 0xec, 0xac, 0x7d, 0xbf, 0xf3,
	0xe3, 0x5d, 0x4d, 0xdf, 0x37, 0xff, 0xce, 0x79, 0x53, 0x36, 0xf3, 0xf7, 0x27, 0xcc, 0xfe, 0x4d,
	0x77, 0x51, 0xd1, 0xbf, 0x8f, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0xa7, 0xe1, 0x2b, 0xd8, 0x1c,
	0x14, 0x00, 0x00,
}
