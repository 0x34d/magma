// Copyright (c) Facebook, Inc. and its affiliates.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.
//
syntax = "proto3";

import "orc8r/protos/common.proto";

package magma.orc8r.upgrade;
option go_package = "protos";

//------------------------------------------------------------------------------
// OTW serialization
//------------------------------------------------------------------------------


//--------------------------------------------------------------------------
// Release management serialization
//--------------------------------------------------------------------------

// A "channel" in this context is a way of partitioning released package
// into groups by stability. For example, the "prod" channel will always have
// the most well-tested and stable software, whereas a "beta" or "staging"
// channel will have software that is still being tested and not stable enough
// to be promoted to a higher channel.

// Example:
// 1. Team releases new package version v2.0.0-0
// 2. This package is released on the "alpha" channel
// 3. After testing, the team determines that the package is stable enough to
//    be promoted to the "beta" channel, where it undergoes more testing.
// 4. Repeat 2-3, promoting the package upwards through tiers until it is
//    promoted to the "prod" channel where it will stay until deprecated.

message ListReleaseChannelsResponse {
    repeated string channel_ids = 1;
}

message CreateOrUpdateReleaseChannelRequest {
    string channel_name = 1;
    ReleaseChannel channel = 2;
}

message GetReleaseChannelRequest {
    string channel_name = 1;
}

message DeleteReleaseChannelRequest {
    string channel_name = 1;
}

//--------------------------------------------------------------------------
// Tier versioning serialization
//--------------------------------------------------------------------------

message GetTiersRequest {
    string network_id = 1;
    // A list of specific tiers IDs to fetch. An empty list means the caller is
    // requesting to fetch all tiers in the table.
    repeated string tier_filter = 2;
}

message GetTiersResponse {
    // Maps tier ID to TierInfo proto for each queried tier
    map<string, TierInfo> tiers = 1;
}

message CreateTierRequest {
    string network_id = 1;
    // ID of the new tier to create
    string tier_id = 2;
    // TierInfo for the new tier
    TierInfo tier_info = 3;
}

message UpdateTierRequest {
    string network_id = 1;
    // ID of the tier to update
    string tier_id = 2;
    // Updated TierInfo for the tier
    TierInfo updated_tier = 3;
}

message DeleteTierRequest {
    string network_id = 1;
    // ID of the tier to delete
    string tier_id_to_delete = 2;
}

//------------------------------------------------------------------------------
// Persistence/DB serialization
//------------------------------------------------------------------------------

message ReleaseChannel {
    repeated string supported_versions = 1;
}

message ImageSpec {
    string name = 1;
    int64 order = 2;
}

message TierInfo {
    string name = 1;
    string version = 2;
    repeated ImageSpec images = 3;
}

service UpgradeService {
    //--------------------------------------------------------------------------
    // Release management endpoints
    //--------------------------------------------------------------------------

    rpc CreateReleaseChannel (CreateOrUpdateReleaseChannelRequest) returns (Void) {}

    rpc GetReleaseChannel (GetReleaseChannelRequest) returns (ReleaseChannel) {}

    rpc ListReleaseChannels (Void) returns (ListReleaseChannelsResponse) {}

    rpc UpdateReleaseChannel (CreateOrUpdateReleaseChannelRequest) returns (Void) {}

    rpc DeleteReleaseChannel (DeleteReleaseChannelRequest) returns (Void) {}

    //--------------------------------------------------------------------------
    // Tier endpoints
    //--------------------------------------------------------------------------

    // Get some tiers in a network.
    // If no tier filter is provided, all tiers in the network will be queried.
    // Otherwise, only the tiers in the tier filter will be queried and returned.

    // If non-existent tiers are provided in the filter parameter, an error
    // will be returned.

    // If any error is encountered on any tier, the entire request
    // will error out.
    rpc GetTiers (GetTiersRequest) returns (GetTiersResponse) {}

    // Create a new tier for a network.
    rpc CreateTier (CreateTierRequest) returns (Void) {}

    // Update an existing tier in a network.
    rpc UpdateTier (UpdateTierRequest) returns (Void) {}

    // Delete a tier in a network.
    rpc DeleteTier (DeleteTierRequest) returns (Void) {}

}
