// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upgrade_service.proto

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protos "magma/orc8r/cloud/go/protos"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListReleaseChannelsResponse struct {
	ChannelIds           []string `protobuf:"bytes,1,rep,name=channel_ids,json=channelIds,proto3" json:"channel_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListReleaseChannelsResponse) Reset()         { *m = ListReleaseChannelsResponse{} }
func (m *ListReleaseChannelsResponse) String() string { return proto.CompactTextString(m) }
func (*ListReleaseChannelsResponse) ProtoMessage()    {}
func (*ListReleaseChannelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{0}
}
func (m *ListReleaseChannelsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListReleaseChannelsResponse.Unmarshal(m, b)
}
func (m *ListReleaseChannelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListReleaseChannelsResponse.Marshal(b, m, deterministic)
}
func (dst *ListReleaseChannelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListReleaseChannelsResponse.Merge(dst, src)
}
func (m *ListReleaseChannelsResponse) XXX_Size() int {
	return xxx_messageInfo_ListReleaseChannelsResponse.Size(m)
}
func (m *ListReleaseChannelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListReleaseChannelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListReleaseChannelsResponse proto.InternalMessageInfo

func (m *ListReleaseChannelsResponse) GetChannelIds() []string {
	if m != nil {
		return m.ChannelIds
	}
	return nil
}

type CreateOrUpdateReleaseChannelRequest struct {
	ChannelName          string          `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	Channel              *ReleaseChannel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CreateOrUpdateReleaseChannelRequest) Reset()         { *m = CreateOrUpdateReleaseChannelRequest{} }
func (m *CreateOrUpdateReleaseChannelRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrUpdateReleaseChannelRequest) ProtoMessage()    {}
func (*CreateOrUpdateReleaseChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{1}
}
func (m *CreateOrUpdateReleaseChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateOrUpdateReleaseChannelRequest.Unmarshal(m, b)
}
func (m *CreateOrUpdateReleaseChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateOrUpdateReleaseChannelRequest.Marshal(b, m, deterministic)
}
func (dst *CreateOrUpdateReleaseChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrUpdateReleaseChannelRequest.Merge(dst, src)
}
func (m *CreateOrUpdateReleaseChannelRequest) XXX_Size() int {
	return xxx_messageInfo_CreateOrUpdateReleaseChannelRequest.Size(m)
}
func (m *CreateOrUpdateReleaseChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrUpdateReleaseChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrUpdateReleaseChannelRequest proto.InternalMessageInfo

func (m *CreateOrUpdateReleaseChannelRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

func (m *CreateOrUpdateReleaseChannelRequest) GetChannel() *ReleaseChannel {
	if m != nil {
		return m.Channel
	}
	return nil
}

type GetReleaseChannelRequest struct {
	ChannelName          string   `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetReleaseChannelRequest) Reset()         { *m = GetReleaseChannelRequest{} }
func (m *GetReleaseChannelRequest) String() string { return proto.CompactTextString(m) }
func (*GetReleaseChannelRequest) ProtoMessage()    {}
func (*GetReleaseChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{2}
}
func (m *GetReleaseChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetReleaseChannelRequest.Unmarshal(m, b)
}
func (m *GetReleaseChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetReleaseChannelRequest.Marshal(b, m, deterministic)
}
func (dst *GetReleaseChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetReleaseChannelRequest.Merge(dst, src)
}
func (m *GetReleaseChannelRequest) XXX_Size() int {
	return xxx_messageInfo_GetReleaseChannelRequest.Size(m)
}
func (m *GetReleaseChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetReleaseChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetReleaseChannelRequest proto.InternalMessageInfo

func (m *GetReleaseChannelRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

type DeleteReleaseChannelRequest struct {
	ChannelName          string   `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteReleaseChannelRequest) Reset()         { *m = DeleteReleaseChannelRequest{} }
func (m *DeleteReleaseChannelRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteReleaseChannelRequest) ProtoMessage()    {}
func (*DeleteReleaseChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{3}
}
func (m *DeleteReleaseChannelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteReleaseChannelRequest.Unmarshal(m, b)
}
func (m *DeleteReleaseChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteReleaseChannelRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteReleaseChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteReleaseChannelRequest.Merge(dst, src)
}
func (m *DeleteReleaseChannelRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteReleaseChannelRequest.Size(m)
}
func (m *DeleteReleaseChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteReleaseChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteReleaseChannelRequest proto.InternalMessageInfo

func (m *DeleteReleaseChannelRequest) GetChannelName() string {
	if m != nil {
		return m.ChannelName
	}
	return ""
}

type GetTiersRequest struct {
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// A list of specific tiers IDs to fetch. An empty list means the caller is
	// requesting to fetch all tiers in the table.
	TierFilter           []string `protobuf:"bytes,2,rep,name=tier_filter,json=tierFilter,proto3" json:"tier_filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTiersRequest) Reset()         { *m = GetTiersRequest{} }
func (m *GetTiersRequest) String() string { return proto.CompactTextString(m) }
func (*GetTiersRequest) ProtoMessage()    {}
func (*GetTiersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{4}
}
func (m *GetTiersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTiersRequest.Unmarshal(m, b)
}
func (m *GetTiersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTiersRequest.Marshal(b, m, deterministic)
}
func (dst *GetTiersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTiersRequest.Merge(dst, src)
}
func (m *GetTiersRequest) XXX_Size() int {
	return xxx_messageInfo_GetTiersRequest.Size(m)
}
func (m *GetTiersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTiersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTiersRequest proto.InternalMessageInfo

func (m *GetTiersRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *GetTiersRequest) GetTierFilter() []string {
	if m != nil {
		return m.TierFilter
	}
	return nil
}

type GetTiersResponse struct {
	// Maps tier ID to TierInfo proto for each queried tier
	Tiers                map[string]*TierInfo `protobuf:"bytes,1,rep,name=tiers,proto3" json:"tiers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetTiersResponse) Reset()         { *m = GetTiersResponse{} }
func (m *GetTiersResponse) String() string { return proto.CompactTextString(m) }
func (*GetTiersResponse) ProtoMessage()    {}
func (*GetTiersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{5}
}
func (m *GetTiersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTiersResponse.Unmarshal(m, b)
}
func (m *GetTiersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTiersResponse.Marshal(b, m, deterministic)
}
func (dst *GetTiersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTiersResponse.Merge(dst, src)
}
func (m *GetTiersResponse) XXX_Size() int {
	return xxx_messageInfo_GetTiersResponse.Size(m)
}
func (m *GetTiersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTiersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTiersResponse proto.InternalMessageInfo

func (m *GetTiersResponse) GetTiers() map[string]*TierInfo {
	if m != nil {
		return m.Tiers
	}
	return nil
}

type CreateTierRequest struct {
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ID of the new tier to create
	TierId string `protobuf:"bytes,2,opt,name=tier_id,json=tierId,proto3" json:"tier_id,omitempty"`
	// TierInfo for the new tier
	TierInfo             *TierInfo `protobuf:"bytes,3,opt,name=tier_info,json=tierInfo,proto3" json:"tier_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CreateTierRequest) Reset()         { *m = CreateTierRequest{} }
func (m *CreateTierRequest) String() string { return proto.CompactTextString(m) }
func (*CreateTierRequest) ProtoMessage()    {}
func (*CreateTierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{6}
}
func (m *CreateTierRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateTierRequest.Unmarshal(m, b)
}
func (m *CreateTierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateTierRequest.Marshal(b, m, deterministic)
}
func (dst *CreateTierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTierRequest.Merge(dst, src)
}
func (m *CreateTierRequest) XXX_Size() int {
	return xxx_messageInfo_CreateTierRequest.Size(m)
}
func (m *CreateTierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTierRequest proto.InternalMessageInfo

func (m *CreateTierRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *CreateTierRequest) GetTierId() string {
	if m != nil {
		return m.TierId
	}
	return ""
}

func (m *CreateTierRequest) GetTierInfo() *TierInfo {
	if m != nil {
		return m.TierInfo
	}
	return nil
}

type UpdateTierRequest struct {
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ID of the tier to update
	TierId string `protobuf:"bytes,2,opt,name=tier_id,json=tierId,proto3" json:"tier_id,omitempty"`
	// Updated TierInfo for the tier
	UpdatedTier          *TierInfo `protobuf:"bytes,3,opt,name=updated_tier,json=updatedTier,proto3" json:"updated_tier,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UpdateTierRequest) Reset()         { *m = UpdateTierRequest{} }
func (m *UpdateTierRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateTierRequest) ProtoMessage()    {}
func (*UpdateTierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{7}
}
func (m *UpdateTierRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateTierRequest.Unmarshal(m, b)
}
func (m *UpdateTierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateTierRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateTierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTierRequest.Merge(dst, src)
}
func (m *UpdateTierRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateTierRequest.Size(m)
}
func (m *UpdateTierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTierRequest proto.InternalMessageInfo

func (m *UpdateTierRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *UpdateTierRequest) GetTierId() string {
	if m != nil {
		return m.TierId
	}
	return ""
}

func (m *UpdateTierRequest) GetUpdatedTier() *TierInfo {
	if m != nil {
		return m.UpdatedTier
	}
	return nil
}

type DeleteTierRequest struct {
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// ID of the tier to delete
	TierIdToDelete       string   `protobuf:"bytes,2,opt,name=tier_id_to_delete,json=tierIdToDelete,proto3" json:"tier_id_to_delete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteTierRequest) Reset()         { *m = DeleteTierRequest{} }
func (m *DeleteTierRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteTierRequest) ProtoMessage()    {}
func (*DeleteTierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{8}
}
func (m *DeleteTierRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteTierRequest.Unmarshal(m, b)
}
func (m *DeleteTierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteTierRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteTierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteTierRequest.Merge(dst, src)
}
func (m *DeleteTierRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteTierRequest.Size(m)
}
func (m *DeleteTierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteTierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteTierRequest proto.InternalMessageInfo

func (m *DeleteTierRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *DeleteTierRequest) GetTierIdToDelete() string {
	if m != nil {
		return m.TierIdToDelete
	}
	return ""
}

type ReleaseChannel struct {
	SupportedVersions    []string `protobuf:"bytes,1,rep,name=supported_versions,json=supportedVersions,proto3" json:"supported_versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReleaseChannel) Reset()         { *m = ReleaseChannel{} }
func (m *ReleaseChannel) String() string { return proto.CompactTextString(m) }
func (*ReleaseChannel) ProtoMessage()    {}
func (*ReleaseChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{9}
}
func (m *ReleaseChannel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReleaseChannel.Unmarshal(m, b)
}
func (m *ReleaseChannel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReleaseChannel.Marshal(b, m, deterministic)
}
func (dst *ReleaseChannel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseChannel.Merge(dst, src)
}
func (m *ReleaseChannel) XXX_Size() int {
	return xxx_messageInfo_ReleaseChannel.Size(m)
}
func (m *ReleaseChannel) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseChannel.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseChannel proto.InternalMessageInfo

func (m *ReleaseChannel) GetSupportedVersions() []string {
	if m != nil {
		return m.SupportedVersions
	}
	return nil
}

type ImageSpec struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Order                int64    `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImageSpec) Reset()         { *m = ImageSpec{} }
func (m *ImageSpec) String() string { return proto.CompactTextString(m) }
func (*ImageSpec) ProtoMessage()    {}
func (*ImageSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{10}
}
func (m *ImageSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImageSpec.Unmarshal(m, b)
}
func (m *ImageSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImageSpec.Marshal(b, m, deterministic)
}
func (dst *ImageSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImageSpec.Merge(dst, src)
}
func (m *ImageSpec) XXX_Size() int {
	return xxx_messageInfo_ImageSpec.Size(m)
}
func (m *ImageSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ImageSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ImageSpec proto.InternalMessageInfo

func (m *ImageSpec) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ImageSpec) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

type TierInfo struct {
	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version              string       `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Images               []*ImageSpec `protobuf:"bytes,3,rep,name=images,proto3" json:"images,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TierInfo) Reset()         { *m = TierInfo{} }
func (m *TierInfo) String() string { return proto.CompactTextString(m) }
func (*TierInfo) ProtoMessage()    {}
func (*TierInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_upgrade_service_e8f4c9695f70c9a6, []int{11}
}
func (m *TierInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TierInfo.Unmarshal(m, b)
}
func (m *TierInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TierInfo.Marshal(b, m, deterministic)
}
func (dst *TierInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TierInfo.Merge(dst, src)
}
func (m *TierInfo) XXX_Size() int {
	return xxx_messageInfo_TierInfo.Size(m)
}
func (m *TierInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TierInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TierInfo proto.InternalMessageInfo

func (m *TierInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TierInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *TierInfo) GetImages() []*ImageSpec {
	if m != nil {
		return m.Images
	}
	return nil
}

func init() {
	proto.RegisterType((*ListReleaseChannelsResponse)(nil), "magma.orc8r.upgrade.ListReleaseChannelsResponse")
	proto.RegisterType((*CreateOrUpdateReleaseChannelRequest)(nil), "magma.orc8r.upgrade.CreateOrUpdateReleaseChannelRequest")
	proto.RegisterType((*GetReleaseChannelRequest)(nil), "magma.orc8r.upgrade.GetReleaseChannelRequest")
	proto.RegisterType((*DeleteReleaseChannelRequest)(nil), "magma.orc8r.upgrade.DeleteReleaseChannelRequest")
	proto.RegisterType((*GetTiersRequest)(nil), "magma.orc8r.upgrade.GetTiersRequest")
	proto.RegisterType((*GetTiersResponse)(nil), "magma.orc8r.upgrade.GetTiersResponse")
	proto.RegisterMapType((map[string]*TierInfo)(nil), "magma.orc8r.upgrade.GetTiersResponse.TiersEntry")
	proto.RegisterType((*CreateTierRequest)(nil), "magma.orc8r.upgrade.CreateTierRequest")
	proto.RegisterType((*UpdateTierRequest)(nil), "magma.orc8r.upgrade.UpdateTierRequest")
	proto.RegisterType((*DeleteTierRequest)(nil), "magma.orc8r.upgrade.DeleteTierRequest")
	proto.RegisterType((*ReleaseChannel)(nil), "magma.orc8r.upgrade.ReleaseChannel")
	proto.RegisterType((*ImageSpec)(nil), "magma.orc8r.upgrade.ImageSpec")
	proto.RegisterType((*TierInfo)(nil), "magma.orc8r.upgrade.TierInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UpgradeServiceClient is the client API for UpgradeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpgradeServiceClient interface {
	CreateReleaseChannel(ctx context.Context, in *CreateOrUpdateReleaseChannelRequest, opts ...grpc.CallOption) (*protos.Void, error)
	GetReleaseChannel(ctx context.Context, in *GetReleaseChannelRequest, opts ...grpc.CallOption) (*ReleaseChannel, error)
	ListReleaseChannels(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*ListReleaseChannelsResponse, error)
	UpdateReleaseChannel(ctx context.Context, in *CreateOrUpdateReleaseChannelRequest, opts ...grpc.CallOption) (*protos.Void, error)
	DeleteReleaseChannel(ctx context.Context, in *DeleteReleaseChannelRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// If any error is encountered on any tier, the entire request
	// will error out.
	GetTiers(ctx context.Context, in *GetTiersRequest, opts ...grpc.CallOption) (*GetTiersResponse, error)
	// Create a new tier for a network.
	CreateTier(ctx context.Context, in *CreateTierRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Update an existing tier in a network.
	UpdateTier(ctx context.Context, in *UpdateTierRequest, opts ...grpc.CallOption) (*protos.Void, error)
	// Delete a tier in a network.
	DeleteTier(ctx context.Context, in *DeleteTierRequest, opts ...grpc.CallOption) (*protos.Void, error)
}

type upgradeServiceClient struct {
	cc *grpc.ClientConn
}

func NewUpgradeServiceClient(cc *grpc.ClientConn) UpgradeServiceClient {
	return &upgradeServiceClient{cc}
}

func (c *upgradeServiceClient) CreateReleaseChannel(ctx context.Context, in *CreateOrUpdateReleaseChannelRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.upgrade.UpgradeService/CreateReleaseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upgradeServiceClient) GetReleaseChannel(ctx context.Context, in *GetReleaseChannelRequest, opts ...grpc.CallOption) (*ReleaseChannel, error) {
	out := new(ReleaseChannel)
	err := c.cc.Invoke(ctx, "/magma.orc8r.upgrade.UpgradeService/GetReleaseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upgradeServiceClient) ListReleaseChannels(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*ListReleaseChannelsResponse, error) {
	out := new(ListReleaseChannelsResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.upgrade.UpgradeService/ListReleaseChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upgradeServiceClient) UpdateReleaseChannel(ctx context.Context, in *CreateOrUpdateReleaseChannelRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.upgrade.UpgradeService/UpdateReleaseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upgradeServiceClient) DeleteReleaseChannel(ctx context.Context, in *DeleteReleaseChannelRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.upgrade.UpgradeService/DeleteReleaseChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upgradeServiceClient) GetTiers(ctx context.Context, in *GetTiersRequest, opts ...grpc.CallOption) (*GetTiersResponse, error) {
	out := new(GetTiersResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.upgrade.UpgradeService/GetTiers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upgradeServiceClient) CreateTier(ctx context.Context, in *CreateTierRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.upgrade.UpgradeService/CreateTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upgradeServiceClient) UpdateTier(ctx context.Context, in *UpdateTierRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.upgrade.UpgradeService/UpdateTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upgradeServiceClient) DeleteTier(ctx context.Context, in *DeleteTierRequest, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.upgrade.UpgradeService/DeleteTier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpgradeServiceServer is the server API for UpgradeService service.
type UpgradeServiceServer interface {
	CreateReleaseChannel(context.Context, *CreateOrUpdateReleaseChannelRequest) (*protos.Void, error)
	GetReleaseChannel(context.Context, *GetReleaseChannelRequest) (*ReleaseChannel, error)
	ListReleaseChannels(context.Context, *protos.Void) (*ListReleaseChannelsResponse, error)
	UpdateReleaseChannel(context.Context, *CreateOrUpdateReleaseChannelRequest) (*protos.Void, error)
	DeleteReleaseChannel(context.Context, *DeleteReleaseChannelRequest) (*protos.Void, error)
	// If any error is encountered on any tier, the entire request
	// will error out.
	GetTiers(context.Context, *GetTiersRequest) (*GetTiersResponse, error)
	// Create a new tier for a network.
	CreateTier(context.Context, *CreateTierRequest) (*protos.Void, error)
	// Update an existing tier in a network.
	UpdateTier(context.Context, *UpdateTierRequest) (*protos.Void, error)
	// Delete a tier in a network.
	DeleteTier(context.Context, *DeleteTierRequest) (*protos.Void, error)
}

func RegisterUpgradeServiceServer(s *grpc.Server, srv UpgradeServiceServer) {
	s.RegisterService(&_UpgradeService_serviceDesc, srv)
}

func _UpgradeService_CreateReleaseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateReleaseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpgradeServiceServer).CreateReleaseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.upgrade.UpgradeService/CreateReleaseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpgradeServiceServer).CreateReleaseChannel(ctx, req.(*CreateOrUpdateReleaseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpgradeService_GetReleaseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReleaseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpgradeServiceServer).GetReleaseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.upgrade.UpgradeService/GetReleaseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpgradeServiceServer).GetReleaseChannel(ctx, req.(*GetReleaseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpgradeService_ListReleaseChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpgradeServiceServer).ListReleaseChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.upgrade.UpgradeService/ListReleaseChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpgradeServiceServer).ListReleaseChannels(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpgradeService_UpdateReleaseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateReleaseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpgradeServiceServer).UpdateReleaseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.upgrade.UpgradeService/UpdateReleaseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpgradeServiceServer).UpdateReleaseChannel(ctx, req.(*CreateOrUpdateReleaseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpgradeService_DeleteReleaseChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReleaseChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpgradeServiceServer).DeleteReleaseChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.upgrade.UpgradeService/DeleteReleaseChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpgradeServiceServer).DeleteReleaseChannel(ctx, req.(*DeleteReleaseChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpgradeService_GetTiers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTiersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpgradeServiceServer).GetTiers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.upgrade.UpgradeService/GetTiers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpgradeServiceServer).GetTiers(ctx, req.(*GetTiersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpgradeService_CreateTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpgradeServiceServer).CreateTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.upgrade.UpgradeService/CreateTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpgradeServiceServer).CreateTier(ctx, req.(*CreateTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpgradeService_UpdateTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpgradeServiceServer).UpdateTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.upgrade.UpgradeService/UpdateTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpgradeServiceServer).UpdateTier(ctx, req.(*UpdateTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpgradeService_DeleteTier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpgradeServiceServer).DeleteTier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.upgrade.UpgradeService/DeleteTier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpgradeServiceServer).DeleteTier(ctx, req.(*DeleteTierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpgradeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.upgrade.UpgradeService",
	HandlerType: (*UpgradeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReleaseChannel",
			Handler:    _UpgradeService_CreateReleaseChannel_Handler,
		},
		{
			MethodName: "GetReleaseChannel",
			Handler:    _UpgradeService_GetReleaseChannel_Handler,
		},
		{
			MethodName: "ListReleaseChannels",
			Handler:    _UpgradeService_ListReleaseChannels_Handler,
		},
		{
			MethodName: "UpdateReleaseChannel",
			Handler:    _UpgradeService_UpdateReleaseChannel_Handler,
		},
		{
			MethodName: "DeleteReleaseChannel",
			Handler:    _UpgradeService_DeleteReleaseChannel_Handler,
		},
		{
			MethodName: "GetTiers",
			Handler:    _UpgradeService_GetTiers_Handler,
		},
		{
			MethodName: "CreateTier",
			Handler:    _UpgradeService_CreateTier_Handler,
		},
		{
			MethodName: "UpdateTier",
			Handler:    _UpgradeService_UpdateTier_Handler,
		},
		{
			MethodName: "DeleteTier",
			Handler:    _UpgradeService_DeleteTier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upgrade_service.proto",
}

func init() {
	proto.RegisterFile("upgrade_service.proto", fileDescriptor_upgrade_service_e8f4c9695f70c9a6)
}

var fileDescriptor_upgrade_service_e8f4c9695f70c9a6 = []byte{
	// 687 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xef, 0x4e, 0x13, 0x4f,
	0x14, 0xed, 0xd2, 0x1f, 0xa5, 0xbd, 0x25, 0xfc, 0xd8, 0x01, 0xe3, 0x5a, 0x82, 0xe2, 0xa0, 0xa6,
	0x7e, 0xa0, 0x18, 0x88, 0x86, 0x90, 0xa0, 0x44, 0x14, 0xb2, 0x89, 0xd1, 0xb8, 0xfc, 0x31, 0x1a,
	0xc9, 0x66, 0xed, 0x5e, 0x70, 0x43, 0x77, 0x67, 0x9d, 0xd9, 0x62, 0x78, 0x02, 0x3f, 0xf9, 0x34,
	0xbe, 0x81, 0x4f, 0x66, 0x66, 0x67, 0x96, 0x02, 0x9d, 0xd6, 0x4a, 0xf8, 0xd4, 0xbd, 0x77, 0xee,
	0x3d, 0x73, 0xe6, 0xcc, 0x9d, 0x93, 0xc2, 0xad, 0x6e, 0x7a, 0xcc, 0x83, 0x10, 0x7d, 0x81, 0xfc,
	0x34, 0x6a, 0x63, 0x2b, 0xe5, 0x2c, 0x63, 0x64, 0x26, 0x0e, 0x8e, 0xe3, 0xa0, 0xc5, 0x78, 0x7b,
	0x8d, 0xb7, 0x74, 0x49, 0xe3, 0x4e, 0x1e, 0x2e, 0xe7, 0x15, 0x62, 0xb9, 0xcd, 0xe2, 0x98, 0x25,
	0xaa, 0x9e, 0x3e, 0x87, 0xb9, 0x37, 0x91, 0xc8, 0x3c, 0xec, 0x60, 0x20, 0x70, 0xeb, 0x6b, 0x90,
	0x24, 0xd8, 0x11, 0x1e, 0x8a, 0x94, 0x25, 0x02, 0xc9, 0x3d, 0xa8, 0xb7, 0x55, 0xce, 0x8f, 0x42,
	0xe1, 0x58, 0x0b, 0xe5, 0x66, 0xcd, 0x03, 0x9d, 0x72, 0x43, 0x41, 0x7f, 0x58, 0xb0, 0xb8, 0xc5,
	0x31, 0xc8, 0xf0, 0x1d, 0xdf, 0x4f, 0xc3, 0x20, 0xc3, 0xcb, 0x50, 0x1e, 0x7e, 0xeb, 0xa2, 0xc8,
	0xc8, 0x7d, 0x98, 0x2c, 0x80, 0x92, 0x20, 0x46, 0xc7, 0x5a, 0xb0, 0x9a, 0x35, 0xaf, 0x00, 0x7f,
	0x1b, 0xc4, 0x48, 0x36, 0x60, 0x42, 0x87, 0xce, 0xd8, 0x82, 0xd5, 0xac, 0xaf, 0x2c, 0xb6, 0x0c,
	0x87, 0x69, 0x5d, 0xc1, 0x2f, 0x7a, 0xe8, 0x06, 0x38, 0x3b, 0x98, 0x5d, 0x77, 0x77, 0xba, 0x09,
	0x73, 0xaf, 0xb0, 0x83, 0xd7, 0xe7, 0x4f, 0xdf, 0xc3, 0xff, 0x3b, 0x98, 0xed, 0x45, 0xc8, 0x45,
	0xd1, 0x35, 0x0f, 0x90, 0x60, 0xf6, 0x9d, 0xf1, 0x13, 0x3f, 0x0a, 0x75, 0x4f, 0x4d, 0x67, 0xdc,
	0x50, 0xaa, 0x9b, 0x45, 0xc8, 0xfd, 0xa3, 0xa8, 0x93, 0x21, 0x77, 0xc6, 0x94, 0xba, 0x32, 0xb5,
	0x9d, 0x67, 0xe8, 0x2f, 0x0b, 0xa6, 0x7b, 0x98, 0xfa, 0x4e, 0xb6, 0x61, 0x5c, 0x96, 0xa8, 0xdb,
	0xa8, 0xaf, 0x3c, 0x31, 0xaa, 0x74, 0xb5, 0xab, 0x95, 0x47, 0xaf, 0x93, 0x8c, 0x9f, 0x79, 0xaa,
	0xbd, 0xf1, 0x01, 0xa0, 0x97, 0x24, 0xd3, 0x50, 0x3e, 0xc1, 0x33, 0xcd, 0x51, 0x7e, 0x92, 0x55,
	0x18, 0x3f, 0x0d, 0x3a, 0x5d, 0xd4, 0xb7, 0x31, 0x6f, 0xdc, 0x47, 0x22, 0xb8, 0xc9, 0x11, 0xf3,
	0x54, 0xed, 0xfa, 0xd8, 0x9a, 0x25, 0x67, 0xc2, 0x56, 0x33, 0x21, 0x57, 0x47, 0xd4, 0xe2, 0x36,
	0x4c, 0xe4, 0x5a, 0x44, 0x61, 0xbe, 0x5f, 0xcd, 0xab, 0xc8, 0xd0, 0x0d, 0xc9, 0x3a, 0xd4, 0xd4,
	0x42, 0x72, 0xc4, 0x9c, 0xf2, 0x28, 0x54, 0xaa, 0x99, 0xfe, 0xa2, 0x3f, 0x2d, 0xb0, 0xd5, 0x54,
	0xde, 0x04, 0x93, 0x4d, 0x98, 0xec, 0xe6, 0x60, 0xa1, 0x2f, 0x33, 0xa3, 0x91, 0xa9, 0xeb, 0x16,
	0x99, 0xa0, 0x87, 0x60, 0xab, 0x21, 0xfb, 0x07, 0x3a, 0x8f, 0xc1, 0xd6, 0x74, 0xfc, 0x8c, 0xf9,
	0x61, 0xde, 0xae, 0x89, 0x4d, 0x29, 0x62, 0x7b, 0x4c, 0x81, 0xd2, 0x17, 0x30, 0x75, 0x79, 0x7a,
	0xc9, 0x12, 0x10, 0xd1, 0x4d, 0x53, 0xc6, 0x25, 0xe9, 0x53, 0xe4, 0x22, 0x62, 0x49, 0xf1, 0x8c,
	0xed, 0xf3, 0x95, 0x03, 0xbd, 0x40, 0x9f, 0x42, 0xcd, 0x8d, 0x83, 0x63, 0xdc, 0x4d, 0xb1, 0x4d,
	0x08, 0xfc, 0x77, 0x61, 0xd4, 0xf3, 0x6f, 0x32, 0x0b, 0xe3, 0x8c, 0x87, 0xf9, 0xac, 0x5a, 0xcd,
	0xb2, 0xa7, 0x02, 0x9a, 0x42, 0xb5, 0x38, 0xaf, 0xb1, 0xcb, 0x81, 0x09, 0xbd, 0xb7, 0x26, 0x5e,
	0x84, 0xe4, 0x19, 0x54, 0x22, 0xb9, 0xa1, 0x70, 0xca, 0xf9, 0x30, 0xdf, 0x35, 0x8a, 0x79, 0xce,
	0xc9, 0xd3, 0xd5, 0x2b, 0xbf, 0x2b, 0x30, 0xb5, 0xaf, 0x56, 0x77, 0x95, 0xff, 0x11, 0x84, 0x59,
	0x35, 0x74, 0x57, 0x24, 0x58, 0x33, 0x42, 0x8e, 0xe0, 0x59, 0x0d, 0xfb, 0x52, 0xe7, 0x01, 0x8b,
	0x42, 0x5a, 0x22, 0x11, 0xd8, 0x7d, 0x36, 0x43, 0x96, 0x06, 0xbd, 0x41, 0x33, 0xf0, 0x28, 0xc6,
	0x46, 0x4b, 0xe4, 0x33, 0xcc, 0x18, 0xbc, 0x99, 0xf4, 0xd3, 0x6a, 0x98, 0x3d, 0x60, 0x88, 0xb1,
	0xd3, 0x92, 0xd4, 0xcb, 0x74, 0xf8, 0x9b, 0xd6, 0xeb, 0x10, 0x66, 0x4d, 0xbe, 0x4a, 0xcc, 0x94,
	0x87, 0x58, 0xb0, 0x19, 0xfe, 0x23, 0x54, 0x0b, 0xab, 0x23, 0x0f, 0xfe, 0xe2, 0x84, 0x0a, 0xe6,
	0xe1, 0x48, 0x7e, 0x49, 0x4b, 0xc4, 0x05, 0xe8, 0xb9, 0x18, 0x79, 0x34, 0x44, 0x96, 0x0b, 0xaf,
	0xd9, 0xcc, 0xd2, 0x05, 0xe8, 0xd9, 0xd0, 0x00, 0xa8, 0x3e, 0x9f, 0x1a, 0x08, 0xd5, 0xb3, 0x90,
	0x01, 0x50, 0x7d, 0x1e, 0x63, 0x84, 0x7a, 0x59, 0xfd, 0x54, 0x51, 0x7f, 0x09, 0xbe, 0xa8, 0xdf,
	0xd5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x45, 0xa8, 0x91, 0x54, 0x55, 0x08, 0x00, 0x00,
}
