/*
Copyright (c) Facebook, Inc. and its affiliates.
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.
*/

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import (
	"magma/orc8r/cloud/go/services/config/streaming/storage"

	"github.com/stretchr/testify/mock"
)

// MconfigStorage is an autogenerated mock type for the MconfigStorage type
type MconfigStorage struct {
	mock.Mock
}

// CreateOrUpdateMconfigs provides a mock function with given fields: networkId, updates
func (_m *MconfigStorage) CreateOrUpdateMconfigs(networkId string, updates []*storage.MconfigUpdateCriteria) error {
	ret := _m.Called(networkId, updates)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []*storage.MconfigUpdateCriteria) error); ok {
		r0 = rf(networkId, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteMconfigs provides a mock function with given fields: networkId, gatewayIds
func (_m *MconfigStorage) DeleteMconfigs(networkId string, gatewayIds []string) error {
	ret := _m.Called(networkId, gatewayIds)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string) error); ok {
		r0 = rf(networkId, gatewayIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMconfig provides a mock function with given fields: networkId, gatewayId
func (_m *MconfigStorage) GetMconfig(networkId string, gatewayId string) (*storage.StoredMconfig, error) {
	ret := _m.Called(networkId, gatewayId)

	var r0 *storage.StoredMconfig
	if rf, ok := ret.Get(0).(func(string, string) *storage.StoredMconfig); ok {
		r0 = rf(networkId, gatewayId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.StoredMconfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(networkId, gatewayId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMconfigs provides a mock function with given fields: networkId, gatewayIds
func (_m *MconfigStorage) GetMconfigs(networkId string, gatewayIds []string) (map[string]*storage.StoredMconfig, error) {
	ret := _m.Called(networkId, gatewayIds)

	var r0 map[string]*storage.StoredMconfig
	if rf, ok := ret.Get(0).(func(string, []string) map[string]*storage.StoredMconfig); ok {
		r0 = rf(networkId, gatewayIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]*storage.StoredMconfig)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(networkId, gatewayIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
