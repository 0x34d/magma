// Copyright (c) 2018-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.
syntax = "proto3";

import "orc8r/protos/common.proto";

package magma.orc8r.config;
option go_package = "protos";


message ConfigFilter {
    string type = 1;
    string key = 2;
}

message Config {
    string type = 1;
    string key = 2;
    bytes value = 3;
}

message GetOrDeleteConfigsRequest {
    string network_id = 1;
    ConfigFilter filter = 2;
}

message GetConfigsResponse {
    repeated Config configs = 1;
}

message GetOrDeleteConfigRequest {
    string network_id = 1;
    string type = 2;
    string key = 3;
}

message ListKeysForTypeRequest {
    string network_id = 1;
    string type = 2;
}

message ListKeysForTypeResponse {
    repeated string keys = 1;
}

message CreateOrUpdateConfigRequest {
    string network_id = 1;
    string type = 2;
    string key = 3;
    bytes value = 4;
}

message NetworkIdRequest {
    string network_id = 1;
}


service ConfigService {
    // Fetch the value of a specific config.
    rpc GetConfig(GetOrDeleteConfigRequest) returns (Config) {}

    // Fetch configs given some filter critiera (type, key, or both).
    // The returned map will contain marshaled configs keyed by a concatenated
    // (type, key) identifier.
    // Use `storage.GetCompositeConfigKey` to key into the returned map
    rpc GetConfigs(GetOrDeleteConfigsRequest) returns (GetConfigsResponse) {}

    // List all keys for a given config type
    rpc ListKeysForType(ListKeysForTypeRequest) returns (ListKeysForTypeResponse) {}

    rpc CreateConfig(CreateOrUpdateConfigRequest) returns (Void) {}
    rpc UpdateConfig(CreateOrUpdateConfigRequest) returns (Void) {}
    rpc DeleteConfig(GetOrDeleteConfigRequest) returns (Void) {}

    // Delete all configs matching  filter criteria (type, key, or both).
    rpc DeleteConfigs(GetOrDeleteConfigsRequest) returns (Void) {}
    // Delete all configs for a given network
    rpc DeleteAllConfigsForNetwork (NetworkIdRequest) returns (Void) {}
}
