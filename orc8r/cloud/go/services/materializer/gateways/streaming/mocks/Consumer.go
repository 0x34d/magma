/*
Copyright (c) Facebook, Inc. and its affiliates.
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.
*/

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import (
	"time"

	"github.com/confluentinc/confluent-kafka-go/kafka"
	"github.com/stretchr/testify/mock"
)

// Consumer is an autogenerated mock type for the Consumer type
type Consumer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Consumer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *Consumer) Commit() ([]kafka.TopicPartition, error) {
	ret := _m.Called()

	var r0 []kafka.TopicPartition
	if rf, ok := ret.Get(0).(func() []kafka.TopicPartition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.TopicPartition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadMessage provides a mock function with given fields: timeout
func (_m *Consumer) ReadMessage(timeout time.Duration) (*kafka.Message, error) {
	ret := _m.Called(timeout)

	var r0 *kafka.Message
	if rf, ok := ret.Get(0).(func(time.Duration) *kafka.Message); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kafka.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(time.Duration) error); ok {
		r1 = rf(timeout)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscribe provides a mock function with given fields: topic, rebalanceCb
func (_m *Consumer) Subscribe(topic string, rebalanceCb kafka.RebalanceCb) error {
	ret := _m.Called(topic, rebalanceCb)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, kafka.RebalanceCb) error); ok {
		r0 = rf(topic, rebalanceCb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SubscribeTopics provides a mock function with given fields: topics, rebalanceCb
func (_m *Consumer) SubscribeTopics(topics []string, rebalanceCb kafka.RebalanceCb) error {
	ret := _m.Called(topics, rebalanceCb)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string, kafka.RebalanceCb) error); ok {
		r0 = rf(topics, rebalanceCb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
