/*
Copyright (c) Facebook, Inc. and its affiliates.
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.
*/

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import mock "github.com/stretchr/testify/mock"

// ConfigManager is an autogenerated mock type for the ConfigManager type
type ConfigManager struct {
	mock.Mock
}

// GetConfigType provides a mock function with given fields:
func (_m *ConfigManager) GetConfigType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetGatewayIdsForConfig provides a mock function with given fields: networkId, configKey
func (_m *ConfigManager) GetGatewayIdsForConfig(networkId string, configKey string) ([]string, error) {
	ret := _m.Called(networkId, configKey)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(networkId, configKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(networkId, configKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarshalConfig provides a mock function with given fields: config
func (_m *ConfigManager) MarshalConfig(config interface{}) ([]byte, error) {
	ret := _m.Called(config)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(config)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnmarshalConfig provides a mock function with given fields: message
func (_m *ConfigManager) UnmarshalConfig(message []byte) (interface{}, error) {
	ret := _m.Called(message)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func([]byte) interface{}); ok {
		r0 = rf(message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
