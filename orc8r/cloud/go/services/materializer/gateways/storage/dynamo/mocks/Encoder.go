/*
Copyright (c) Facebook, Inc. and its affiliates.
All rights reserved.

This source code is licensed under the BSD-style license found in the
LICENSE file in the root directory of this source tree.
*/

// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import dynamodb "github.com/aws/aws-sdk-go/service/dynamodb"
import mock "github.com/stretchr/testify/mock"
import storage "magma/orc8r/cloud/go/services/materializer/gateways/storage"

// Encoder is an autogenerated mock type for the Encoder type
type Encoder struct {
	mock.Mock
}

// GetBatchGetItemInputs provides a mock function with given fields: keys, batchSize
func (_m *Encoder) GetBatchGetItemInputs(keys []map[string]*dynamodb.AttributeValue, batchSize int) ([]*dynamodb.BatchGetItemInput, error) {
	ret := _m.Called(keys, batchSize)

	var r0 []*dynamodb.BatchGetItemInput
	if rf, ok := ret.Get(0).(func([]map[string]*dynamodb.AttributeValue, int) []*dynamodb.BatchGetItemInput); ok {
		r0 = rf(keys, batchSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dynamodb.BatchGetItemInput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]map[string]*dynamodb.AttributeValue, int) error); ok {
		r1 = rf(keys, batchSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBatchedWriteRequestsForGatewayViewDeletion provides a mock function with given fields: networkID, gatewayIDs, batchSize
func (_m *Encoder) GetBatchedWriteRequestsForGatewayViewDeletion(networkID string, gatewayIDs []string, batchSize int) ([][]*dynamodb.WriteRequest, error) {
	ret := _m.Called(networkID, gatewayIDs, batchSize)

	var r0 [][]*dynamodb.WriteRequest
	if rf, ok := ret.Get(0).(func(string, []string, int) [][]*dynamodb.WriteRequest); ok {
		r0 = rf(networkID, gatewayIDs, batchSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]*dynamodb.WriteRequest)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string, int) error); ok {
		r1 = rf(networkID, gatewayIDs, batchSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeysForGetItems provides a mock function with given fields: networkID, gatewayIDs
func (_m *Encoder) GetKeysForGetItems(networkID string, gatewayIDs []string) ([]map[string]*dynamodb.AttributeValue, error) {
	ret := _m.Called(networkID, gatewayIDs)

	var r0 []map[string]*dynamodb.AttributeValue
	if rf, ok := ret.Get(0).(func(string, []string) []map[string]*dynamodb.AttributeValue); ok {
		r0 = rf(networkID, gatewayIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]*dynamodb.AttributeValue)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []string) error); ok {
		r1 = rf(networkID, gatewayIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpdateItemInputs provides a mock function with given fields: networkID, updates
func (_m *Encoder) GetUpdateItemInputs(networkID string, updates map[string]*storage.GatewayUpdateParams) ([]*dynamodb.UpdateItemInput, error) {
	ret := _m.Called(networkID, updates)

	var r0 []*dynamodb.UpdateItemInput
	if rf, ok := ret.Get(0).(func(string, map[string]*storage.GatewayUpdateParams) []*dynamodb.UpdateItemInput); ok {
		r0 = rf(networkID, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dynamodb.UpdateItemInput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]*storage.GatewayUpdateParams) error); ok {
		r1 = rf(networkID, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
