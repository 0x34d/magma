// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkFederationConfigs Federation configuration for a network
// swagger:model network_federation_configs
type NetworkFederationConfigs struct {

	// gx
	Gx *NetworkFederationConfigsGx `json:"gx,omitempty"`

	// gy
	Gy *NetworkFederationConfigsGy `json:"gy,omitempty"`

	// hss
	Hss *NetworkFederationConfigsHss `json:"hss,omitempty"`

	// s6a
	S6a *NetworkFederationConfigsS6a `json:"s6a,omitempty"`

	// served network ids
	ServedNetworkIds []string `json:"served_network_ids"`

	// swx
	Swx *NetworkFederationConfigsSwx `json:"swx,omitempty"`
}

// Validate validates this network federation configs
func (m *NetworkFederationConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHss(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS6a(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSwx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkFederationConfigs) validateGx(formats strfmt.Registry) error {

	if swag.IsZero(m.Gx) { // not required
		return nil
	}

	if m.Gx != nil {
		if err := m.Gx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gx")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateGy(formats strfmt.Registry) error {

	if swag.IsZero(m.Gy) { // not required
		return nil
	}

	if m.Gy != nil {
		if err := m.Gy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gy")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateHss(formats strfmt.Registry) error {

	if swag.IsZero(m.Hss) { // not required
		return nil
	}

	if m.Hss != nil {
		if err := m.Hss.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hss")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateS6a(formats strfmt.Registry) error {

	if swag.IsZero(m.S6a) { // not required
		return nil
	}

	if m.S6a != nil {
		if err := m.S6a.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s6a")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigs) validateSwx(formats strfmt.Registry) error {

	if swag.IsZero(m.Swx) { // not required
		return nil
	}

	if m.Swx != nil {
		if err := m.Swx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkFederationConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkFederationConfigs) UnmarshalBinary(b []byte) error {
	var res NetworkFederationConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkFederationConfigsGx network federation configs gx
// swagger:model NetworkFederationConfigsGx
type NetworkFederationConfigsGx struct {

	// server
	Server *DiameterClientConfigs `json:"server,omitempty"`
}

// Validate validates this network federation configs gx
func (m *NetworkFederationConfigsGx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkFederationConfigsGx) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gx" + "." + "server")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkFederationConfigsGx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkFederationConfigsGx) UnmarshalBinary(b []byte) error {
	var res NetworkFederationConfigsGx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkFederationConfigsGy network federation configs gy
// swagger:model NetworkFederationConfigsGy
type NetworkFederationConfigsGy struct {

	// init method
	// Enum: [1 2]
	InitMethod *uint32 `json:"init_method,omitempty"`

	// server
	Server *DiameterClientConfigs `json:"server,omitempty"`
}

// Validate validates this network federation configs gy
func (m *NetworkFederationConfigsGy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var networkFederationConfigsGyTypeInitMethodPropEnum []interface{}

func init() {
	var res []uint32
	if err := json.Unmarshal([]byte(`[1,2]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkFederationConfigsGyTypeInitMethodPropEnum = append(networkFederationConfigsGyTypeInitMethodPropEnum, v)
	}
}

// prop value enum
func (m *NetworkFederationConfigsGy) validateInitMethodEnum(path, location string, value uint32) error {
	if err := validate.Enum(path, location, value, networkFederationConfigsGyTypeInitMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkFederationConfigsGy) validateInitMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.InitMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateInitMethodEnum("gy"+"."+"init_method", "body", *m.InitMethod); err != nil {
		return err
	}

	return nil
}

func (m *NetworkFederationConfigsGy) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gy" + "." + "server")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkFederationConfigsGy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkFederationConfigsGy) UnmarshalBinary(b []byte) error {
	var res NetworkFederationConfigsGy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkFederationConfigsHss network federation configs hss
// swagger:model NetworkFederationConfigsHss
type NetworkFederationConfigsHss struct {

	// default sub profile
	DefaultSubProfile *SubscriptionProfile `json:"default_sub_profile,omitempty"`

	// lte auth amf
	LteAuthAmf string `json:"lte_auth_amf,omitempty"`

	// lte auth op
	LteAuthOp string `json:"lte_auth_op,omitempty"`

	// server
	Server *DiameterServerConfigs `json:"server,omitempty"`

	// sub profiles
	SubProfiles map[string]SubscriptionProfile `json:"sub_profiles,omitempty"`
}

// Validate validates this network federation configs hss
func (m *NetworkFederationConfigsHss) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDefaultSubProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkFederationConfigsHss) validateDefaultSubProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultSubProfile) { // not required
		return nil
	}

	if m.DefaultSubProfile != nil {
		if err := m.DefaultSubProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hss" + "." + "default_sub_profile")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigsHss) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hss" + "." + "server")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkFederationConfigsHss) validateSubProfiles(formats strfmt.Registry) error {

	if swag.IsZero(m.SubProfiles) { // not required
		return nil
	}

	for k := range m.SubProfiles {

		if err := validate.Required("hss"+"."+"sub_profiles"+"."+k, "body", m.SubProfiles[k]); err != nil {
			return err
		}
		if val, ok := m.SubProfiles[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkFederationConfigsHss) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkFederationConfigsHss) UnmarshalBinary(b []byte) error {
	var res NetworkFederationConfigsHss
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkFederationConfigsS6a network federation configs s6a
// swagger:model NetworkFederationConfigsS6a
type NetworkFederationConfigsS6a struct {

	// server
	Server *DiameterClientConfigs `json:"server,omitempty"`
}

// Validate validates this network federation configs s6a
func (m *NetworkFederationConfigsS6a) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkFederationConfigsS6a) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s6a" + "." + "server")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkFederationConfigsS6a) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkFederationConfigsS6a) UnmarshalBinary(b []byte) error {
	var res NetworkFederationConfigsS6a
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NetworkFederationConfigsSwx network federation configs swx
// swagger:model NetworkFederationConfigsSwx
type NetworkFederationConfigsSwx struct {

	// server
	Server *DiameterClientConfigs `json:"server,omitempty"`
}

// Validate validates this network federation configs swx
func (m *NetworkFederationConfigsSwx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkFederationConfigsSwx) validateServer(formats strfmt.Registry) error {

	if swag.IsZero(m.Server) { // not required
		return nil
	}

	if m.Server != nil {
		if err := m.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("swx" + "." + "server")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkFederationConfigsSwx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkFederationConfigsSwx) UnmarshalBinary(b []byte) error {
	var res NetworkFederationConfigsSwx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
