#!/bin/bash
set -e

start=$(date +%s)

if [ -z ${CLOUD_ADDRESS+x} ]; then
  export CLOUD_ADDRESS="controller.magma.etagecom.io"
fi

if [ -z ${BOOTSTRAP_CLOUD_ADDRESS+x} ]; then
  export BOOTSTRAP_CLOUD_ADDRESS="bootstrapper-controller.magma.etagecom.io"
fi

if [ -z ${SNOWFLAKE+x} ]; then
    # shellcheck source=/dev/null
    SNOWFLAKE="$(. scripts/generate_snowflake)"
    export SNOWFLAKE
fi

echo "Creating image with snowflake ${SNOWFLAKE}"

# shellcheck source=/dev/null
. scripts/build_image firstparty devmand | tee /tmp/devmand_build.log
build_status=${PIPESTATUS[0]}
if [ "$build_status" -eq 0 ]; then
  docker rm -f devmand &>/dev/null || true
  docker run --name devmand \
    -v "$(realpath ../gateway):/cache/devmand/repo:ro" \
    -v "$(realpath ~/cache_devmand_build):/cache/devmand/build:rw" \
    facebookconnectivity-southpoll-dev-docker.jfrog.io/devmand
  docker cp devmand:/cache/devmand/install firstparty
  # shellcheck source=/dev/null
  . scripts/build_image firstparty symphony-agent | tee /tmp/symphony_agent_build.log
  /bin/rm -rf firstparty/install
  build_status=${PIPESTATUS[0]}
fi

if [ "$build_status" -eq 0 ]; then
  echo "Created image with snowflake ${SNOWFLAKE}!"
else
  echo "Creating image with snowflake ${SNOWFLAKE} failed!"
fi

docker-compose up -d

end=$(date +%s)
runtime=$((end-start))
echo "The script took ${runtime} seconds to run."

exit "$build_status"
