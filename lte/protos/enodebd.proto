// Copyright (c) 2016-present, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.

syntax = "proto3";

import "orc8r/protos/service303.proto";
import "orc8r/protos/common.proto";

package magma.lte;

option go_package = "magma/lte/cloud/go/protos";


// --------------------------------------------------------------------------
// Message Definitions for TR-069 message injection. This is used for manual
// testing of the TR-069 server.
// --------------------------------------------------------------------------

message GetParameterRequest {
  // Fully qualified parameter name, e.g:
  // InternetGatewayDevice.LANDevice.1.Hosts.
  string parameter_name = 1;
}

message NameValue {
  string name = 1;
  // Note: parameter value is always passed back as string. Up to calling
  // function to determine type
  string value = 2;
}
message GetParameterResponse {
  repeated NameValue parameters = 1;
}

message SetParameterRequest {
  // Fully qualified parameter name, e.g:
  // InternetGatewayDevice.LANDevice.1.Hosts.
  string parameter_name = 1;

  // Data values for each data type
  oneof value {
    int32 value_int = 2;
    string value_string = 3;
    bool value_bool = 4;
  }

  // Key to be used at ACS discretion to determine when parameter was last
  // updated
  string parameter_key = 5;
}

// --------------------------------------------------------------------------
// Enodebd service definition.
// --------------------------------------------------------------------------
service Enodebd {

  // Sends GetParameterValues message to ENodeB. TR-069 supports multiple
  // parameter names per message, but only one is supported here.
  rpc GetParameter (GetParameterRequest) returns (GetParameterResponse);

  // Sends SetParameterValues message to ENodeB. TR-069 supports multiple
  // parameter names per message, but only one is supported here.
  rpc SetParameter (SetParameterRequest) returns (magma.orc8r.Void);

  // Configure eNodeB based on enodebd config file
  rpc Configure (magma.orc8r.Void) returns (magma.orc8r.Void);

  // Reboot eNodeB
  rpc Reboot (magma.orc8r.Void) returns (magma.orc8r.Void);

  // Get current status
  rpc GetStatus (magma.orc8r.Void) returns (magma.orc8r.ServiceStatus);
}
