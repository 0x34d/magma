// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lte/protos/subscriberdb.proto

package protos // import "magma/lte/cloud/go/protos"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import field_mask "google.golang.org/genproto/protobuf/field_mask"
import protos "magma/orc8r/cloud/go/protos"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SubscriberID_IDType int32

const (
	SubscriberID_IMSI SubscriberID_IDType = 0
)

var SubscriberID_IDType_name = map[int32]string{
	0: "IMSI",
}
var SubscriberID_IDType_value = map[string]int32{
	"IMSI": 0,
}

func (x SubscriberID_IDType) String() string {
	return proto.EnumName(SubscriberID_IDType_name, int32(x))
}
func (SubscriberID_IDType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{0, 0}
}

type GSMSubscription_GSMSubscriptionState int32

const (
	GSMSubscription_INACTIVE GSMSubscription_GSMSubscriptionState = 0
	GSMSubscription_ACTIVE   GSMSubscription_GSMSubscriptionState = 1
)

var GSMSubscription_GSMSubscriptionState_name = map[int32]string{
	0: "INACTIVE",
	1: "ACTIVE",
}
var GSMSubscription_GSMSubscriptionState_value = map[string]int32{
	"INACTIVE": 0,
	"ACTIVE":   1,
}

func (x GSMSubscription_GSMSubscriptionState) String() string {
	return proto.EnumName(GSMSubscription_GSMSubscriptionState_name, int32(x))
}
func (GSMSubscription_GSMSubscriptionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{2, 0}
}

type GSMSubscription_GSMAuthAlgo int32

const (
	GSMSubscription_PRECOMPUTED_AUTH_TUPLES GSMSubscription_GSMAuthAlgo = 0
)

var GSMSubscription_GSMAuthAlgo_name = map[int32]string{
	0: "PRECOMPUTED_AUTH_TUPLES",
}
var GSMSubscription_GSMAuthAlgo_value = map[string]int32{
	"PRECOMPUTED_AUTH_TUPLES": 0,
}

func (x GSMSubscription_GSMAuthAlgo) String() string {
	return proto.EnumName(GSMSubscription_GSMAuthAlgo_name, int32(x))
}
func (GSMSubscription_GSMAuthAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{2, 1}
}

type LTESubscription_LTESubscriptionState int32

const (
	LTESubscription_INACTIVE LTESubscription_LTESubscriptionState = 0
	LTESubscription_ACTIVE   LTESubscription_LTESubscriptionState = 1
)

var LTESubscription_LTESubscriptionState_name = map[int32]string{
	0: "INACTIVE",
	1: "ACTIVE",
}
var LTESubscription_LTESubscriptionState_value = map[string]int32{
	"INACTIVE": 0,
	"ACTIVE":   1,
}

func (x LTESubscription_LTESubscriptionState) String() string {
	return proto.EnumName(LTESubscription_LTESubscriptionState_name, int32(x))
}
func (LTESubscription_LTESubscriptionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{3, 0}
}

type LTESubscription_LTEAuthAlgo int32

const (
	LTESubscription_MILENAGE LTESubscription_LTEAuthAlgo = 0
)

var LTESubscription_LTEAuthAlgo_name = map[int32]string{
	0: "MILENAGE",
}
var LTESubscription_LTEAuthAlgo_value = map[string]int32{
	"MILENAGE": 0,
}

func (x LTESubscription_LTEAuthAlgo) String() string {
	return proto.EnumName(LTESubscription_LTEAuthAlgo_name, int32(x))
}
func (LTESubscription_LTEAuthAlgo) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{3, 1}
}

// --------------------------------------------------------------------------
// SubscriberID (or SID) uniquely identifies the subscriber across the system
// --------------------------------------------------------------------------
type SubscriberID struct {
	Id                   string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 SubscriberID_IDType `protobuf:"varint,2,opt,name=type,proto3,enum=magma.lte.SubscriberID_IDType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SubscriberID) Reset()         { *m = SubscriberID{} }
func (m *SubscriberID) String() string { return proto.CompactTextString(m) }
func (*SubscriberID) ProtoMessage()    {}
func (*SubscriberID) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{0}
}
func (m *SubscriberID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberID.Unmarshal(m, b)
}
func (m *SubscriberID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberID.Marshal(b, m, deterministic)
}
func (dst *SubscriberID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberID.Merge(dst, src)
}
func (m *SubscriberID) XXX_Size() int {
	return xxx_messageInfo_SubscriberID.Size(m)
}
func (m *SubscriberID) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberID.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberID proto.InternalMessageInfo

func (m *SubscriberID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SubscriberID) GetType() SubscriberID_IDType {
	if m != nil {
		return m.Type
	}
	return SubscriberID_IMSI
}

type SubscriberIDSet struct {
	Sids                 []*SubscriberID `protobuf:"bytes,1,rep,name=sids,proto3" json:"sids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SubscriberIDSet) Reset()         { *m = SubscriberIDSet{} }
func (m *SubscriberIDSet) String() string { return proto.CompactTextString(m) }
func (*SubscriberIDSet) ProtoMessage()    {}
func (*SubscriberIDSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{1}
}
func (m *SubscriberIDSet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberIDSet.Unmarshal(m, b)
}
func (m *SubscriberIDSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberIDSet.Marshal(b, m, deterministic)
}
func (dst *SubscriberIDSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberIDSet.Merge(dst, src)
}
func (m *SubscriberIDSet) XXX_Size() int {
	return xxx_messageInfo_SubscriberIDSet.Size(m)
}
func (m *SubscriberIDSet) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberIDSet.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberIDSet proto.InternalMessageInfo

func (m *SubscriberIDSet) GetSids() []*SubscriberID {
	if m != nil {
		return m.Sids
	}
	return nil
}

// --------------------------------------------------------------------------
// GSM/LTE subscription info
// --------------------------------------------------------------------------
type GSMSubscription struct {
	State    GSMSubscription_GSMSubscriptionState `protobuf:"varint,1,opt,name=state,proto3,enum=magma.lte.GSMSubscription_GSMSubscriptionState" json:"state,omitempty"`
	AuthAlgo GSMSubscription_GSMAuthAlgo          `protobuf:"varint,2,opt,name=auth_algo,json=authAlgo,proto3,enum=magma.lte.GSMSubscription_GSMAuthAlgo" json:"auth_algo,omitempty"`
	// Authentication key (ki). Need for A3/A8 algos. This is not used
	// when the auth_algo is PRECOMPUTED_AUTH_TUPLES.
	AuthKey []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// Precomputed (rand, sres, kc) tuples. Used when the auth_algo is
	// PRECOMPUTED_AUTH_TUPLES.
	AuthTuples           [][]byte `protobuf:"bytes,4,rep,name=auth_tuples,json=authTuples,proto3" json:"auth_tuples,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GSMSubscription) Reset()         { *m = GSMSubscription{} }
func (m *GSMSubscription) String() string { return proto.CompactTextString(m) }
func (*GSMSubscription) ProtoMessage()    {}
func (*GSMSubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{2}
}
func (m *GSMSubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GSMSubscription.Unmarshal(m, b)
}
func (m *GSMSubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GSMSubscription.Marshal(b, m, deterministic)
}
func (dst *GSMSubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GSMSubscription.Merge(dst, src)
}
func (m *GSMSubscription) XXX_Size() int {
	return xxx_messageInfo_GSMSubscription.Size(m)
}
func (m *GSMSubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_GSMSubscription.DiscardUnknown(m)
}

var xxx_messageInfo_GSMSubscription proto.InternalMessageInfo

func (m *GSMSubscription) GetState() GSMSubscription_GSMSubscriptionState {
	if m != nil {
		return m.State
	}
	return GSMSubscription_INACTIVE
}

func (m *GSMSubscription) GetAuthAlgo() GSMSubscription_GSMAuthAlgo {
	if m != nil {
		return m.AuthAlgo
	}
	return GSMSubscription_PRECOMPUTED_AUTH_TUPLES
}

func (m *GSMSubscription) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

func (m *GSMSubscription) GetAuthTuples() [][]byte {
	if m != nil {
		return m.AuthTuples
	}
	return nil
}

type LTESubscription struct {
	State    LTESubscription_LTESubscriptionState `protobuf:"varint,1,opt,name=state,proto3,enum=magma.lte.LTESubscription_LTESubscriptionState" json:"state,omitempty"`
	AuthAlgo LTESubscription_LTEAuthAlgo          `protobuf:"varint,2,opt,name=auth_algo,json=authAlgo,proto3,enum=magma.lte.LTESubscription_LTEAuthAlgo" json:"auth_algo,omitempty"`
	// Authentication key (k).
	AuthKey []byte `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	// Operator configuration field (Op) signed with authentication key (k)
	AuthOpc              []byte   `protobuf:"bytes,4,opt,name=auth_opc,json=authOpc,proto3" json:"auth_opc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LTESubscription) Reset()         { *m = LTESubscription{} }
func (m *LTESubscription) String() string { return proto.CompactTextString(m) }
func (*LTESubscription) ProtoMessage()    {}
func (*LTESubscription) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{3}
}
func (m *LTESubscription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LTESubscription.Unmarshal(m, b)
}
func (m *LTESubscription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LTESubscription.Marshal(b, m, deterministic)
}
func (dst *LTESubscription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LTESubscription.Merge(dst, src)
}
func (m *LTESubscription) XXX_Size() int {
	return xxx_messageInfo_LTESubscription.Size(m)
}
func (m *LTESubscription) XXX_DiscardUnknown() {
	xxx_messageInfo_LTESubscription.DiscardUnknown(m)
}

var xxx_messageInfo_LTESubscription proto.InternalMessageInfo

func (m *LTESubscription) GetState() LTESubscription_LTESubscriptionState {
	if m != nil {
		return m.State
	}
	return LTESubscription_INACTIVE
}

func (m *LTESubscription) GetAuthAlgo() LTESubscription_LTEAuthAlgo {
	if m != nil {
		return m.AuthAlgo
	}
	return LTESubscription_MILENAGE
}

func (m *LTESubscription) GetAuthKey() []byte {
	if m != nil {
		return m.AuthKey
	}
	return nil
}

func (m *LTESubscription) GetAuthOpc() []byte {
	if m != nil {
		return m.AuthOpc
	}
	return nil
}

type SubscriberState struct {
	// Next SEQ to be used for calculating the AUTN.
	LteAuthNextSeq       uint64   `protobuf:"varint,1,opt,name=lte_auth_next_seq,json=lteAuthNextSeq,proto3" json:"lte_auth_next_seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriberState) Reset()         { *m = SubscriberState{} }
func (m *SubscriberState) String() string { return proto.CompactTextString(m) }
func (*SubscriberState) ProtoMessage()    {}
func (*SubscriberState) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{4}
}
func (m *SubscriberState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberState.Unmarshal(m, b)
}
func (m *SubscriberState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberState.Marshal(b, m, deterministic)
}
func (dst *SubscriberState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberState.Merge(dst, src)
}
func (m *SubscriberState) XXX_Size() int {
	return xxx_messageInfo_SubscriberState.Size(m)
}
func (m *SubscriberState) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberState.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberState proto.InternalMessageInfo

func (m *SubscriberState) GetLteAuthNextSeq() uint64 {
	if m != nil {
		return m.LteAuthNextSeq
	}
	return 0
}

// --------------------------------------------------------------------------
// User subscription record. This record is serialized and stored in the DB.
// --------------------------------------------------------------------------
type SubscriberData struct {
	// Unique indentifier for the subscriber
	Sid       *SubscriberID     `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Gsm       *GSMSubscription  `protobuf:"bytes,2,opt,name=gsm,proto3" json:"gsm,omitempty"`
	Lte       *LTESubscription  `protobuf:"bytes,3,opt,name=lte,proto3" json:"lte,omitempty"`
	NetworkId *protos.NetworkID `protobuf:"bytes,4,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	State     *SubscriberState  `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Subscription profile
	SubProfile           string   `protobuf:"bytes,6,opt,name=sub_profile,json=subProfile,proto3" json:"sub_profile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscriberData) Reset()         { *m = SubscriberData{} }
func (m *SubscriberData) String() string { return proto.CompactTextString(m) }
func (*SubscriberData) ProtoMessage()    {}
func (*SubscriberData) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{5}
}
func (m *SubscriberData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberData.Unmarshal(m, b)
}
func (m *SubscriberData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberData.Marshal(b, m, deterministic)
}
func (dst *SubscriberData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberData.Merge(dst, src)
}
func (m *SubscriberData) XXX_Size() int {
	return xxx_messageInfo_SubscriberData.Size(m)
}
func (m *SubscriberData) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberData.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberData proto.InternalMessageInfo

func (m *SubscriberData) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *SubscriberData) GetGsm() *GSMSubscription {
	if m != nil {
		return m.Gsm
	}
	return nil
}

func (m *SubscriberData) GetLte() *LTESubscription {
	if m != nil {
		return m.Lte
	}
	return nil
}

func (m *SubscriberData) GetNetworkId() *protos.NetworkID {
	if m != nil {
		return m.NetworkId
	}
	return nil
}

func (m *SubscriberData) GetState() *SubscriberState {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *SubscriberData) GetSubProfile() string {
	if m != nil {
		return m.SubProfile
	}
	return ""
}

type SubscriberUpdate struct {
	// Updated subscription data
	Data *SubscriberData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Specifies the fields to be updated
	// The mask can be individual subscription elements (Eg: 'lte.auth_key') or
	// entire subset in the SubscriberData (Eg: 'lte' to update all lte.* fields)
	Mask                 *field_mask.FieldMask `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SubscriberUpdate) Reset()         { *m = SubscriberUpdate{} }
func (m *SubscriberUpdate) String() string { return proto.CompactTextString(m) }
func (*SubscriberUpdate) ProtoMessage()    {}
func (*SubscriberUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{6}
}
func (m *SubscriberUpdate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberUpdate.Unmarshal(m, b)
}
func (m *SubscriberUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberUpdate.Marshal(b, m, deterministic)
}
func (dst *SubscriberUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberUpdate.Merge(dst, src)
}
func (m *SubscriberUpdate) XXX_Size() int {
	return xxx_messageInfo_SubscriberUpdate.Size(m)
}
func (m *SubscriberUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberUpdate proto.InternalMessageInfo

func (m *SubscriberUpdate) GetData() *SubscriberData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SubscriberUpdate) GetMask() *field_mask.FieldMask {
	if m != nil {
		return m.Mask
	}
	return nil
}

// --------------------------------------------------------------------------
// SubscriberDB controller
// --------------------------------------------------------------------------
type SubscriberLookup struct {
	NetworkId            *protos.NetworkID `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Sid                  *SubscriberID     `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SubscriberLookup) Reset()         { *m = SubscriberLookup{} }
func (m *SubscriberLookup) String() string { return proto.CompactTextString(m) }
func (*SubscriberLookup) ProtoMessage()    {}
func (*SubscriberLookup) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{7}
}
func (m *SubscriberLookup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriberLookup.Unmarshal(m, b)
}
func (m *SubscriberLookup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriberLookup.Marshal(b, m, deterministic)
}
func (dst *SubscriberLookup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriberLookup.Merge(dst, src)
}
func (m *SubscriberLookup) XXX_Size() int {
	return xxx_messageInfo_SubscriberLookup.Size(m)
}
func (m *SubscriberLookup) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriberLookup.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriberLookup proto.InternalMessageInfo

func (m *SubscriberLookup) GetNetworkId() *protos.NetworkID {
	if m != nil {
		return m.NetworkId
	}
	return nil
}

func (m *SubscriberLookup) GetSid() *SubscriberID {
	if m != nil {
		return m.Sid
	}
	return nil
}

type GetAllSubscriberDataResponse struct {
	Subscribers          []*SubscriberData `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetAllSubscriberDataResponse) Reset()         { *m = GetAllSubscriberDataResponse{} }
func (m *GetAllSubscriberDataResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllSubscriberDataResponse) ProtoMessage()    {}
func (*GetAllSubscriberDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscriberdb_49c190b46841c3e4, []int{8}
}
func (m *GetAllSubscriberDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetAllSubscriberDataResponse.Unmarshal(m, b)
}
func (m *GetAllSubscriberDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetAllSubscriberDataResponse.Marshal(b, m, deterministic)
}
func (dst *GetAllSubscriberDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllSubscriberDataResponse.Merge(dst, src)
}
func (m *GetAllSubscriberDataResponse) XXX_Size() int {
	return xxx_messageInfo_GetAllSubscriberDataResponse.Size(m)
}
func (m *GetAllSubscriberDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllSubscriberDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllSubscriberDataResponse proto.InternalMessageInfo

func (m *GetAllSubscriberDataResponse) GetSubscribers() []*SubscriberData {
	if m != nil {
		return m.Subscribers
	}
	return nil
}

func init() {
	proto.RegisterType((*SubscriberID)(nil), "magma.lte.SubscriberID")
	proto.RegisterType((*SubscriberIDSet)(nil), "magma.lte.SubscriberIDSet")
	proto.RegisterType((*GSMSubscription)(nil), "magma.lte.GSMSubscription")
	proto.RegisterType((*LTESubscription)(nil), "magma.lte.LTESubscription")
	proto.RegisterType((*SubscriberState)(nil), "magma.lte.SubscriberState")
	proto.RegisterType((*SubscriberData)(nil), "magma.lte.SubscriberData")
	proto.RegisterType((*SubscriberUpdate)(nil), "magma.lte.SubscriberUpdate")
	proto.RegisterType((*SubscriberLookup)(nil), "magma.lte.SubscriberLookup")
	proto.RegisterType((*GetAllSubscriberDataResponse)(nil), "magma.lte.GetAllSubscriberDataResponse")
	proto.RegisterEnum("magma.lte.SubscriberID_IDType", SubscriberID_IDType_name, SubscriberID_IDType_value)
	proto.RegisterEnum("magma.lte.GSMSubscription_GSMSubscriptionState", GSMSubscription_GSMSubscriptionState_name, GSMSubscription_GSMSubscriptionState_value)
	proto.RegisterEnum("magma.lte.GSMSubscription_GSMAuthAlgo", GSMSubscription_GSMAuthAlgo_name, GSMSubscription_GSMAuthAlgo_value)
	proto.RegisterEnum("magma.lte.LTESubscription_LTESubscriptionState", LTESubscription_LTESubscriptionState_name, LTESubscription_LTESubscriptionState_value)
	proto.RegisterEnum("magma.lte.LTESubscription_LTEAuthAlgo", LTESubscription_LTEAuthAlgo_name, LTESubscription_LTEAuthAlgo_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubscriberDBClient is the client API for SubscriberDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriberDBClient interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error)
}

type subscriberDBClient struct {
	cc *grpc.ClientConn
}

func NewSubscriberDBClient(cc *grpc.ClientConn) SubscriberDBClient {
	return &subscriberDBClient{cc}
}

func (c *subscriberDBClient) AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/AddSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) DeleteSubscriber(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/DeleteSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) UpdateSubscriber(ctx context.Context, in *SubscriberUpdate, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/UpdateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) GetSubscriberData(ctx context.Context, in *SubscriberID, opts ...grpc.CallOption) (*SubscriberData, error) {
	out := new(SubscriberData)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/GetSubscriberData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBClient) ListSubscribers(ctx context.Context, in *protos.Void, opts ...grpc.CallOption) (*SubscriberIDSet, error) {
	out := new(SubscriberIDSet)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDB/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberDBServer is the server API for SubscriberDB service.
type SubscriberDBServer interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(context.Context, *SubscriberData) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(context.Context, *SubscriberID) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(context.Context, *SubscriberUpdate) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(context.Context, *SubscriberID) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(context.Context, *protos.Void) (*SubscriberIDSet, error)
}

func RegisterSubscriberDBServer(s *grpc.Server, srv SubscriberDBServer) {
	s.RegisterService(&_SubscriberDB_serviceDesc, srv)
}

func _SubscriberDB_AddSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/AddSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).AddSubscriber(ctx, req.(*SubscriberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/DeleteSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).DeleteSubscriber(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_UpdateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/UpdateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).UpdateSubscriber(ctx, req.(*SubscriberUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_GetSubscriberData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/GetSubscriberData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).GetSubscriberData(ctx, req.(*SubscriberID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDB_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDB/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBServer).ListSubscribers(ctx, req.(*protos.Void))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriberDB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SubscriberDB",
	HandlerType: (*SubscriberDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubscriber",
			Handler:    _SubscriberDB_AddSubscriber_Handler,
		},
		{
			MethodName: "DeleteSubscriber",
			Handler:    _SubscriberDB_DeleteSubscriber_Handler,
		},
		{
			MethodName: "UpdateSubscriber",
			Handler:    _SubscriberDB_UpdateSubscriber_Handler,
		},
		{
			MethodName: "GetSubscriberData",
			Handler:    _SubscriberDB_GetSubscriberData_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberDB_ListSubscribers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}

// SubscriberDBControllerClient is the client API for SubscriberDBController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscriberDBControllerClient interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(ctx context.Context, in *SubscriberLookup, opts ...grpc.CallOption) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(ctx context.Context, in *SubscriberLookup, opts ...grpc.CallOption) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(ctx context.Context, in *protos.NetworkID, opts ...grpc.CallOption) (*SubscriberIDSet, error)
	// Get all subscriber data for the network
	GetAllSubscriberData(ctx context.Context, in *protos.NetworkID, opts ...grpc.CallOption) (*GetAllSubscriberDataResponse, error)
}

type subscriberDBControllerClient struct {
	cc *grpc.ClientConn
}

func NewSubscriberDBControllerClient(cc *grpc.ClientConn) SubscriberDBControllerClient {
	return &subscriberDBControllerClient{cc}
}

func (c *subscriberDBControllerClient) AddSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBController/AddSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBControllerClient) DeleteSubscriber(ctx context.Context, in *SubscriberLookup, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBController/DeleteSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBControllerClient) UpdateSubscriber(ctx context.Context, in *SubscriberData, opts ...grpc.CallOption) (*protos.Void, error) {
	out := new(protos.Void)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBController/UpdateSubscriber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBControllerClient) GetSubscriberData(ctx context.Context, in *SubscriberLookup, opts ...grpc.CallOption) (*SubscriberData, error) {
	out := new(SubscriberData)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBController/GetSubscriberData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBControllerClient) ListSubscribers(ctx context.Context, in *protos.NetworkID, opts ...grpc.CallOption) (*SubscriberIDSet, error) {
	out := new(SubscriberIDSet)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBController/ListSubscribers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriberDBControllerClient) GetAllSubscriberData(ctx context.Context, in *protos.NetworkID, opts ...grpc.CallOption) (*GetAllSubscriberDataResponse, error) {
	out := new(GetAllSubscriberDataResponse)
	err := c.cc.Invoke(ctx, "/magma.lte.SubscriberDBController/GetAllSubscriberData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriberDBControllerServer is the server API for SubscriberDBController service.
type SubscriberDBControllerServer interface {
	// Adds a new subscriber to the store.
	// Throws ALREADY_EXISTS if the subscriber already exists.
	//
	AddSubscriber(context.Context, *SubscriberData) (*protos.Void, error)
	// Deletes an existing subscriber.
	// If the subscriber is not already present, this request is ignored.
	//
	DeleteSubscriber(context.Context, *SubscriberLookup) (*protos.Void, error)
	// Updates an existing subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	UpdateSubscriber(context.Context, *SubscriberData) (*protos.Void, error)
	// Returns the SubscriberData for a subscriber.
	// Throws NOT_FOUND if the subscriber is missing.
	//
	GetSubscriberData(context.Context, *SubscriberLookup) (*SubscriberData, error)
	// List the subscribers in the store.
	//
	ListSubscribers(context.Context, *protos.NetworkID) (*SubscriberIDSet, error)
	// Get all subscriber data for the network
	GetAllSubscriberData(context.Context, *protos.NetworkID) (*GetAllSubscriberDataResponse, error)
}

func RegisterSubscriberDBControllerServer(s *grpc.Server, srv SubscriberDBControllerServer) {
	s.RegisterService(&_SubscriberDBController_serviceDesc, srv)
}

func _SubscriberDBController_AddSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBControllerServer).AddSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBController/AddSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBControllerServer).AddSubscriber(ctx, req.(*SubscriberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBController_DeleteSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberLookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBControllerServer).DeleteSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBController/DeleteSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBControllerServer).DeleteSubscriber(ctx, req.(*SubscriberLookup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBController_UpdateSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBControllerServer).UpdateSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBController/UpdateSubscriber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBControllerServer).UpdateSubscriber(ctx, req.(*SubscriberData))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBController_GetSubscriberData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscriberLookup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBControllerServer).GetSubscriberData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBController/GetSubscriberData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBControllerServer).GetSubscriberData(ctx, req.(*SubscriberLookup))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBController_ListSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.NetworkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBControllerServer).ListSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBController/ListSubscribers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBControllerServer).ListSubscribers(ctx, req.(*protos.NetworkID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriberDBController_GetAllSubscriberData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protos.NetworkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriberDBControllerServer).GetAllSubscriberData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.lte.SubscriberDBController/GetAllSubscriberData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriberDBControllerServer).GetAllSubscriberData(ctx, req.(*protos.NetworkID))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscriberDBController_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.lte.SubscriberDBController",
	HandlerType: (*SubscriberDBControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSubscriber",
			Handler:    _SubscriberDBController_AddSubscriber_Handler,
		},
		{
			MethodName: "DeleteSubscriber",
			Handler:    _SubscriberDBController_DeleteSubscriber_Handler,
		},
		{
			MethodName: "UpdateSubscriber",
			Handler:    _SubscriberDBController_UpdateSubscriber_Handler,
		},
		{
			MethodName: "GetSubscriberData",
			Handler:    _SubscriberDBController_GetSubscriberData_Handler,
		},
		{
			MethodName: "ListSubscribers",
			Handler:    _SubscriberDBController_ListSubscribers_Handler,
		},
		{
			MethodName: "GetAllSubscriberData",
			Handler:    _SubscriberDBController_GetAllSubscriberData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lte/protos/subscriberdb.proto",
}

func init() {
	proto.RegisterFile("lte/protos/subscriberdb.proto", fileDescriptor_subscriberdb_49c190b46841c3e4)
}

var fileDescriptor_subscriberdb_49c190b46841c3e4 = []byte{
	// 856 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc7, 0xf3, 0xe1, 0x2d, 0xed, 0x49, 0x49, 0xd3, 0xd1, 0x6a, 0x37, 0x4d, 0x81, 0x8d, 0xe6,
	0x02, 0xb2, 0x7c, 0x38, 0x2b, 0x23, 0x24, 0x24, 0x10, 0x90, 0xd6, 0x26, 0x58, 0x24, 0xdd, 0xca,
	0x4e, 0x57, 0x02, 0x2e, 0x2c, 0x27, 0x9e, 0x66, 0xad, 0x4c, 0x32, 0xae, 0x67, 0x2c, 0xb6, 0x8f,
	0x03, 0x2f, 0xc1, 0x9b, 0xf0, 0x08, 0x3c, 0x07, 0xf2, 0xd8, 0x69, 0xbc, 0xae, 0x6d, 0xb6, 0xe2,
	0x2a, 0x9e, 0x99, 0xff, 0xf9, 0xcf, 0x99, 0xdf, 0x9c, 0x39, 0x0a, 0x7c, 0x48, 0x05, 0x19, 0x06,
	0x21, 0x13, 0x8c, 0x0f, 0x79, 0x34, 0xe7, 0x8b, 0xd0, 0x9f, 0x93, 0xd0, 0x9b, 0xab, 0x72, 0x0e,
	0x1d, 0xac, 0xdd, 0xe5, 0xda, 0x55, 0xa9, 0x20, 0xbd, 0x13, 0x16, 0x2e, 0xbe, 0x0e, 0xb7, 0xda,
	0x05, 0x5b, 0xaf, 0xd9, 0x26, 0x51, 0xf5, 0xfa, 0x4b, 0xc6, 0x96, 0x34, 0xf5, 0x99, 0x47, 0xd7,
	0xc3, 0x6b, 0x9f, 0x50, 0xcf, 0x59, 0xbb, 0x7c, 0x95, 0x28, 0xf0, 0x35, 0x1c, 0xda, 0x77, 0xee,
	0xa6, 0x8e, 0xda, 0xd0, 0xf0, 0xbd, 0x6e, 0xbd, 0x5f, 0x1f, 0x1c, 0x58, 0x0d, 0xdf, 0x43, 0x1a,
	0x28, 0xe2, 0x36, 0x20, 0xdd, 0x46, 0xbf, 0x3e, 0x68, 0x6b, 0x1f, 0xa9, 0x77, 0xdb, 0xaa, 0xd9,
	0x30, 0xd5, 0xd4, 0x67, 0xb7, 0x01, 0xb1, 0xa4, 0x16, 0x23, 0xd8, 0x4b, 0xc6, 0x68, 0x1f, 0x14,
	0x73, 0x6a, 0x9b, 0x9d, 0x1a, 0xfe, 0x0e, 0x8e, 0xb2, 0x01, 0x36, 0x11, 0xe8, 0x33, 0x50, 0xb8,
	0xef, 0xf1, 0x6e, 0xbd, 0xdf, 0x1c, 0xb4, 0xb4, 0xa7, 0x25, 0xd6, 0x96, 0x14, 0xe1, 0xbf, 0x1a,
	0x70, 0x34, 0xb6, 0xa7, 0xe9, 0x4a, 0x20, 0x7c, 0xb6, 0x41, 0x06, 0x3c, 0xe2, 0xc2, 0x15, 0x44,
	0xa6, 0xdb, 0xd6, 0x86, 0x19, 0x87, 0x9c, 0x34, 0x3f, 0xb6, 0xe3, 0x30, 0x2b, 0x89, 0x46, 0xe7,
	0x70, 0xe0, 0x46, 0xe2, 0xb5, 0xe3, 0xd2, 0x25, 0x4b, 0xcf, 0xf9, 0x71, 0xb5, 0xd5, 0x28, 0x12,
	0xaf, 0x47, 0x74, 0xc9, 0xac, 0x7d, 0x37, 0xfd, 0x42, 0x27, 0x20, 0xbf, 0x9d, 0x15, 0xb9, 0xed,
	0x36, 0xfb, 0xf5, 0xc1, 0xa1, 0xf5, 0x5e, 0x3c, 0xfe, 0x99, 0xdc, 0xa2, 0x67, 0xd0, 0x92, 0x4b,
	0x22, 0x0a, 0x28, 0xe1, 0x5d, 0xa5, 0xdf, 0x1c, 0x1c, 0x5a, 0x10, 0x4f, 0xcd, 0xe4, 0x0c, 0x7e,
	0x01, 0x8f, 0x8b, 0xf2, 0x43, 0x87, 0xb0, 0x6f, 0x5e, 0x8c, 0xce, 0x67, 0xe6, 0x2b, 0xa3, 0x53,
	0x43, 0x00, 0x7b, 0xe9, 0x77, 0x1d, 0x7f, 0x0a, 0xad, 0x4c, 0x1a, 0xe8, 0x14, 0x9e, 0x5e, 0x5a,
	0xc6, 0xf9, 0xcb, 0xe9, 0xe5, 0xd5, 0xcc, 0xd0, 0x9d, 0xd1, 0xd5, 0xec, 0x27, 0x67, 0x76, 0x75,
	0x39, 0x31, 0xec, 0x4e, 0x0d, 0xff, 0xd9, 0x80, 0xa3, 0xc9, 0xcc, 0x78, 0x57, 0x72, 0x39, 0x69,
	0x7e, 0xfc, 0x10, 0x72, 0x05, 0x56, 0x0f, 0x23, 0xb7, 0x5d, 0x62, 0xc1, 0xa2, 0xab, 0xec, 0x96,
	0x5e, 0x06, 0x8b, 0x98, 0x59, 0x51, 0x66, 0x15, 0xcc, 0x4e, 0xa1, 0x95, 0x49, 0x20, 0x16, 0x4e,
	0xcd, 0x89, 0x71, 0x31, 0x1a, 0x1b, 0x9d, 0x1a, 0xfe, 0x36, 0x5b, 0x9e, 0x89, 0xd3, 0x73, 0x38,
	0xa6, 0x82, 0x38, 0x32, 0x81, 0x0d, 0x79, 0x23, 0x1c, 0x4e, 0x6e, 0x24, 0x2f, 0xc5, 0x6a, 0x53,
	0x41, 0x62, 0xa3, 0x0b, 0xf2, 0x46, 0xd8, 0xe4, 0x06, 0xff, 0xd1, 0x80, 0xf6, 0x2e, 0x5c, 0x77,
	0x85, 0x8b, 0x9e, 0x43, 0x93, 0xa7, 0x0f, 0xa9, 0xa2, 0xb6, 0x63, 0x0d, 0xfa, 0x1c, 0x9a, 0x4b,
	0xbe, 0x96, 0xfc, 0x5a, 0x5a, 0xaf, 0xbc, 0xf2, 0xac, 0x58, 0x16, 0xab, 0xa9, 0x20, 0x92, 0xd4,
	0xdb, 0xea, 0x1c, 0x0e, 0x2b, 0x96, 0xa1, 0xaf, 0x00, 0x36, 0x44, 0xfc, 0xce, 0xc2, 0x95, 0xe3,
	0x7b, 0x92, 0x61, 0x4b, 0x7b, 0x92, 0x06, 0xc9, 0xb6, 0xa1, 0x5e, 0x24, 0xcb, 0xa6, 0x6e, 0x1d,
	0xa4, 0x4a, 0xd3, 0x43, 0x2f, 0xb6, 0xf5, 0xf1, 0xe8, 0xde, 0x36, 0x39, 0x4c, 0xdb, 0x52, 0x78,
	0x06, 0x2d, 0x1e, 0xcd, 0x9d, 0x20, 0x64, 0xd7, 0x3e, 0x25, 0xdd, 0x3d, 0xd9, 0x40, 0x80, 0x47,
	0xf3, 0xcb, 0x64, 0x06, 0xdf, 0x40, 0x67, 0x17, 0x7a, 0x15, 0x78, 0x71, 0xd0, 0x17, 0xa0, 0x78,
	0xae, 0x70, 0x53, 0x4a, 0x27, 0x85, 0xbb, 0xc4, 0x34, 0x2d, 0x29, 0x43, 0x2a, 0x28, 0x71, 0xe7,
	0xba, 0x23, 0x95, 0x34, 0x37, 0x75, 0xdb, 0xdc, 0xd4, 0x1f, 0xe3, 0xe6, 0x36, 0x75, 0xf9, 0xca,
	0x92, 0x3a, 0x2c, 0xb2, 0x5b, 0x4e, 0x18, 0x5b, 0x45, 0x41, 0x0e, 0x48, 0xfd, 0x5d, 0x81, 0xa4,
	0xd7, 0xd9, 0xf8, 0xef, 0xeb, 0xc4, 0xbf, 0xc1, 0x07, 0x63, 0x22, 0x46, 0x94, 0xe6, 0xce, 0x40,
	0x78, 0xc0, 0x36, 0x9c, 0xa0, 0x6f, 0x24, 0xa9, 0x74, 0x65, 0xdb, 0xfd, 0x2a, 0xce, 0x9e, 0x55,
	0x6b, 0xff, 0x34, 0xb2, 0xfd, 0x5a, 0x3f, 0x43, 0xdf, 0xc3, 0xfb, 0x23, 0xcf, 0xdb, 0x4d, 0xa1,
	0x72, 0xa7, 0xde, 0xf1, 0x5b, 0xe7, 0x7c, 0xc5, 0x7c, 0x0f, 0xd7, 0xd0, 0x0f, 0xd0, 0xd1, 0x09,
	0x25, 0x82, 0x64, 0x3c, 0xca, 0x0e, 0x58, 0xec, 0xa0, 0x43, 0x27, 0xb9, 0xcf, 0x8c, 0xc3, 0x69,
	0xa1, 0x43, 0x22, 0x2b, 0x76, 0x31, 0xe1, 0x78, 0x4c, 0x44, 0xee, 0x15, 0x95, 0x26, 0x52, 0x7e,
	0x4a, 0x5c, 0x43, 0x67, 0x70, 0x34, 0xf1, 0x79, 0xc6, 0x8b, 0xa3, 0xfb, 0x5b, 0xf6, 0x7a, 0x25,
	0xde, 0x36, 0x11, 0xb8, 0xa6, 0xfd, 0xdd, 0x84, 0x27, 0x59, 0xd0, 0xe7, 0x6c, 0x23, 0x42, 0x46,
	0x29, 0x09, 0xff, 0x3f, 0x72, 0xbd, 0x00, 0x79, 0x31, 0xb0, 0xa4, 0x68, 0x8b, 0x5d, 0xce, 0x0a,
	0xb0, 0x3f, 0x34, 0x93, 0x69, 0x11, 0xf4, 0xca, 0x54, 0x2a, 0xc1, 0x8f, 0xef, 0x83, 0x2f, 0x79,
	0x5b, 0xd5, 0xf4, 0xd1, 0x2f, 0xf0, 0xb8, 0xe8, 0x0d, 0x95, 0xba, 0x7d, 0x92, 0xed, 0x9a, 0x15,
	0x8f, 0x0f, 0xd7, 0xce, 0x4e, 0x7f, 0x3d, 0x91, 0xda, 0x61, 0xfc, 0xff, 0x6a, 0x41, 0x59, 0xe4,
	0x0d, 0x97, 0x2c, 0xfd, 0xf3, 0x34, 0xdf, 0x93, 0xbf, 0x5f, 0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0xc7, 0x52, 0xc4, 0x95, 0x7d, 0x09, 0x00, 0x00,
}
